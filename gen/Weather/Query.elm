-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Weather.Query exposing (CurrentWeatherOptionalArguments, FiveDayForecastOptionalArguments, currentWeather, fiveDayForecast)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Weather.Enum.Language
import Weather.Enum.Units
import Weather.InputObject
import Weather.Interface
import Weather.Object
import Weather.Scalar
import Weather.ScalarDecoders
import Weather.Union


type alias CurrentWeatherOptionalArguments =
    { lang : OptionalArgument Weather.Enum.Language.Language
    , units : OptionalArgument Weather.Enum.Units.Units
    }


{-|

  - lang -
  - units -

-}
currentWeather : (CurrentWeatherOptionalArguments -> CurrentWeatherOptionalArguments) -> SelectionSet decodesTo Weather.Object.CurrentWeather -> SelectionSet decodesTo RootQuery
currentWeather fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { lang = Absent, units = Absent }

        optionalArgs =
            [ Argument.optional "lang" filledInOptionals.lang (Encode.enum Weather.Enum.Language.toString), Argument.optional "units" filledInOptionals.units (Encode.enum Weather.Enum.Units.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "currentWeather" optionalArgs object_ identity


type alias FiveDayForecastOptionalArguments =
    { lang : OptionalArgument Weather.Enum.Language.Language
    , units : OptionalArgument Weather.Enum.Units.Units
    }


{-|

  - lang -
  - units -

-}
fiveDayForecast : (FiveDayForecastOptionalArguments -> FiveDayForecastOptionalArguments) -> SelectionSet decodesTo Weather.Object.FiveDayForecast -> SelectionSet decodesTo RootQuery
fiveDayForecast fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { lang = Absent, units = Absent }

        optionalArgs =
            [ Argument.optional "lang" filledInOptionals.lang (Encode.enum Weather.Enum.Language.toString), Argument.optional "units" filledInOptionals.units (Encode.enum Weather.Enum.Units.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "fiveDayForecast" optionalArgs object_ identity
