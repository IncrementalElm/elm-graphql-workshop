-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Weather.Object.CurrentWeather exposing (ByCityIDRequiredArguments, ByCityNameOptionalArguments, ByCityNameRequiredArguments, ByLatLonRequiredArguments, ByZIPOptionalArguments, ByZIPRequiredArguments, byCityID, byCityName, byLatLon, byZIP)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Weather.InputObject
import Weather.Interface
import Weather.Object
import Weather.Scalar
import Weather.ScalarDecoders
import Weather.Union


type alias ByCityNameOptionalArguments =
    { countryCode : OptionalArgument String }


type alias ByCityNameRequiredArguments =
    { name : String }


{-|

  - name -
  - countryCode -

-}
byCityName : (ByCityNameOptionalArguments -> ByCityNameOptionalArguments) -> ByCityNameRequiredArguments -> SelectionSet decodesTo Weather.Object.CurrentWeatherResponse -> SelectionSet decodesTo Weather.Object.CurrentWeather
byCityName fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { countryCode = Absent }

        optionalArgs =
            [ Argument.optional "countryCode" filledInOptionals.countryCode Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "byCityName" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ identity


type alias ByCityIDRequiredArguments =
    { id : Int }


{-|

  - id -

-}
byCityID : ByCityIDRequiredArguments -> SelectionSet decodesTo Weather.Object.CurrentWeatherResponse -> SelectionSet decodesTo Weather.Object.CurrentWeather
byCityID requiredArgs object_ =
    Object.selectionForCompositeField "byCityID" [ Argument.required "id" requiredArgs.id Encode.int ] object_ identity


type alias ByLatLonRequiredArguments =
    { lat : Float
    , lon : Float
    }


{-|

  - lat -
  - lon -

-}
byLatLon : ByLatLonRequiredArguments -> SelectionSet decodesTo Weather.Object.CurrentWeatherResponse -> SelectionSet decodesTo Weather.Object.CurrentWeather
byLatLon requiredArgs object_ =
    Object.selectionForCompositeField "byLatLon" [ Argument.required "lat" requiredArgs.lat Encode.float, Argument.required "lon" requiredArgs.lon Encode.float ] object_ identity


type alias ByZIPOptionalArguments =
    { countryCode : OptionalArgument String }


type alias ByZIPRequiredArguments =
    { zip : Float }


{-|

  - zip -
  - countryCode -

-}
byZIP : (ByZIPOptionalArguments -> ByZIPOptionalArguments) -> ByZIPRequiredArguments -> SelectionSet decodesTo Weather.Object.CurrentWeatherResponse -> SelectionSet decodesTo Weather.Object.CurrentWeather
byZIP fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { countryCode = Absent }

        optionalArgs =
            [ Argument.optional "countryCode" filledInOptionals.countryCode Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "byZIP" (optionalArgs ++ [ Argument.required "zip" requiredArgs.zip Encode.float ]) object_ identity
