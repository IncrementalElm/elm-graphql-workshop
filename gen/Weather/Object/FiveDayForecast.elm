-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Weather.Object.FiveDayForecast exposing (ByCityIDOptionalArguments, ByCityIDRequiredArguments, ByCityNameOptionalArguments, ByCityNameRequiredArguments, ByLatLonRequiredArguments, ByZIPOptionalArguments, ByZIPRequiredArguments, byCityID, byCityName, byLatLon, byZIP)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Weather.Enum.Units
import Weather.InputObject
import Weather.Interface
import Weather.Object
import Weather.Scalar
import Weather.ScalarDecoders
import Weather.Union


type alias ByCityNameOptionalArguments =
    { countryCode : OptionalArgument String }


type alias ByCityNameRequiredArguments =
    { name : String }


{-|

  - name -
  - countryCode -

-}
byCityName : (ByCityNameOptionalArguments -> ByCityNameOptionalArguments) -> ByCityNameRequiredArguments -> SelectionSet decodesTo Weather.Object.FiveDayForecastResponse -> SelectionSet (Maybe decodesTo) Weather.Object.FiveDayForecast
byCityName fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { countryCode = Absent }

        optionalArgs =
            [ Argument.optional "countryCode" filledInOptionals.countryCode Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "byCityName" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias ByCityIDOptionalArguments =
    { units : OptionalArgument Weather.Enum.Units.Units }


type alias ByCityIDRequiredArguments =
    { id : Int }


{-|

  - id -
  - units -

-}
byCityID : (ByCityIDOptionalArguments -> ByCityIDOptionalArguments) -> ByCityIDRequiredArguments -> SelectionSet decodesTo Weather.Object.FiveDayForecastResponse -> SelectionSet (Maybe decodesTo) Weather.Object.FiveDayForecast
byCityID fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { units = Absent }

        optionalArgs =
            [ Argument.optional "units" filledInOptionals.units (Encode.enum Weather.Enum.Units.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "byCityID" (optionalArgs ++ [ Argument.required "id" requiredArgs.id Encode.int ]) object_ (identity >> Decode.nullable)


type alias ByLatLonRequiredArguments =
    { lat : Float
    , lon : Float
    }


{-|

  - lat -
  - lon -

-}
byLatLon : ByLatLonRequiredArguments -> SelectionSet decodesTo Weather.Object.FiveDayForecastResponse -> SelectionSet (Maybe decodesTo) Weather.Object.FiveDayForecast
byLatLon requiredArgs object_ =
    Object.selectionForCompositeField "byLatLon" [ Argument.required "lat" requiredArgs.lat Encode.float, Argument.required "lon" requiredArgs.lon Encode.float ] object_ (identity >> Decode.nullable)


type alias ByZIPOptionalArguments =
    { countryCode : OptionalArgument String }


type alias ByZIPRequiredArguments =
    { zip : Float }


{-|

  - zip -
  - countryCode -

-}
byZIP : (ByZIPOptionalArguments -> ByZIPOptionalArguments) -> ByZIPRequiredArguments -> SelectionSet decodesTo Weather.Object.FiveDayForecastResponse -> SelectionSet (Maybe decodesTo) Weather.Object.FiveDayForecast
byZIP fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { countryCode = Absent }

        optionalArgs =
            [ Argument.optional "countryCode" filledInOptionals.countryCode Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "byZIP" (optionalArgs ++ [ Argument.required "zip" requiredArgs.zip Encode.float ]) object_ (identity >> Decode.nullable)
