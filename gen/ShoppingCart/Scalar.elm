-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ShoppingCart.Scalar exposing (Codecs, Dollars(..), ProductCode(..), Upload(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Dollars
    = Dollars String


type ProductCode
    = ProductCode String


type Upload
    = Upload String


defineCodecs :
    { codecDollars : Codec valueDollars
    , codecProductCode : Codec valueProductCode
    , codecUpload : Codec valueUpload
    }
    -> Codecs valueDollars valueProductCode valueUpload
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDollars valueProductCode valueUpload
    ->
        { codecDollars : Codec valueDollars
        , codecProductCode : Codec valueProductCode
        , codecUpload : Codec valueUpload
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDollars valueProductCode valueUpload
    = Codecs (RawCodecs valueDollars valueProductCode valueUpload)


type alias RawCodecs valueDollars valueProductCode valueUpload =
    { codecDollars : Codec valueDollars
    , codecProductCode : Codec valueProductCode
    , codecUpload : Codec valueUpload
    }


defaultCodecs : RawCodecs Dollars ProductCode Upload
defaultCodecs =
    { codecDollars =
        { encoder = \(Dollars raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Dollars
        }
    , codecProductCode =
        { encoder = \(ProductCode raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ProductCode
        }
    , codecUpload =
        { encoder = \(Upload raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Upload
        }
    }
