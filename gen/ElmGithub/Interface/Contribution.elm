-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ElmGithub.Interface.Contribution exposing (Fragments, fragments, isRestricted, maybeFragments, occurredAt, resourcePath, url, user)

import ElmGithub.InputObject
import ElmGithub.Interface
import ElmGithub.Object
import ElmGithub.Scalar
import ElmGithub.ScalarCodecs
import ElmGithub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onCreatedIssueContribution : SelectionSet decodesTo ElmGithub.Object.CreatedIssueContribution
    , onRestrictedContribution : SelectionSet decodesTo ElmGithub.Object.RestrictedContribution
    , onCreatedPullRequestContribution : SelectionSet decodesTo ElmGithub.Object.CreatedPullRequestContribution
    , onJoinedGitHubContribution : SelectionSet decodesTo ElmGithub.Object.JoinedGitHubContribution
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo ElmGithub.Interface.Contribution
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "CreatedIssueContribution" selections.onCreatedIssueContribution
        , Object.buildFragment "RestrictedContribution" selections.onRestrictedContribution
        , Object.buildFragment "CreatedPullRequestContribution" selections.onCreatedPullRequestContribution
        , Object.buildFragment "JoinedGitHubContribution" selections.onJoinedGitHubContribution
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onCreatedIssueContribution = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onRestrictedContribution = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCreatedPullRequestContribution = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onJoinedGitHubContribution = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
-}
isRestricted : SelectionSet Bool ElmGithub.Interface.Contribution
isRestricted =
    Object.selectionForField "Bool" "isRestricted" [] Decode.bool


{-| When this contribution was made.
-}
occurredAt : SelectionSet ElmGithub.ScalarCodecs.DateTime ElmGithub.Interface.Contribution
occurredAt =
    Object.selectionForField "ScalarCodecs.DateTime" "occurredAt" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP path for this contribution.
-}
resourcePath : SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Interface.Contribution
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for this contribution.
-}
url : SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Interface.Contribution
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The user who made this contribution.
-}
user : SelectionSet decodesTo ElmGithub.Object.User -> SelectionSet decodesTo ElmGithub.Interface.Contribution
user object_ =
    Object.selectionForCompositeField "user" [] object_ identity
