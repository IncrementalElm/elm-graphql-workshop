-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ElmGithub.Object.User exposing (AvatarUrlOptionalArguments, CommitCommentsOptionalArguments, ContributionsCollectionOptionalArguments, FollowersOptionalArguments, FollowingOptionalArguments, GistCommentsOptionalArguments, GistRequiredArguments, GistsOptionalArguments, IssueCommentsOptionalArguments, IssuesOptionalArguments, OrganizationRequiredArguments, OrganizationsOptionalArguments, PinnedRepositoriesOptionalArguments, ProjectRequiredArguments, ProjectsOptionalArguments, PublicKeysOptionalArguments, PullRequestsOptionalArguments, RepositoriesContributedToOptionalArguments, RepositoriesOptionalArguments, RepositoryRequiredArguments, StarredRepositoriesOptionalArguments, WatchingOptionalArguments, avatarUrl, bio, bioHTML, commitComments, company, companyHTML, contributionsCollection, createdAt, databaseId, email, followers, following, gist, gistComments, gists, id, isBountyHunter, isCampusExpert, isDeveloperProgramMember, isEmployee, isHireable, isSiteAdmin, isViewer, issueComments, issues, location, login, name, organization, organizations, pinnedRepositories, project, projects, projectsResourcePath, projectsUrl, publicKeys, pullRequests, repositories, repositoriesContributedTo, repository, resourcePath, starredRepositories, status, updatedAt, url, viewerCanCreateProjects, viewerCanFollow, viewerIsFollowing, watching, websiteUrl)

import ElmGithub.Enum.GistPrivacy
import ElmGithub.Enum.IssueState
import ElmGithub.Enum.ProjectState
import ElmGithub.Enum.PullRequestState
import ElmGithub.Enum.RepositoryAffiliation
import ElmGithub.Enum.RepositoryContributionType
import ElmGithub.Enum.RepositoryPrivacy
import ElmGithub.InputObject
import ElmGithub.Interface
import ElmGithub.Object
import ElmGithub.Scalar
import ElmGithub.ScalarCodecs
import ElmGithub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


{-| A URL pointing to the user's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Object.User
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Uri" "avatarUrl" optionalArgs (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The user's public profile bio.
-}
bio : SelectionSet (Maybe String) ElmGithub.Object.User
bio =
    Object.selectionForField "(Maybe String)" "bio" [] (Decode.string |> Decode.nullable)


{-| The user's public profile bio as HTML.
-}
bioHTML : SelectionSet ElmGithub.ScalarCodecs.Html ElmGithub.Object.User
bioHTML =
    Object.selectionForField "ScalarCodecs.Html" "bioHTML" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


type alias CommitCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of commit comments made by this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
commitComments : (CommitCommentsOptionalArguments -> CommitCommentsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.CommitCommentConnection -> SelectionSet decodesTo ElmGithub.Object.User
commitComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "commitComments" optionalArgs object_ identity


{-| The user's public profile company.
-}
company : SelectionSet (Maybe String) ElmGithub.Object.User
company =
    Object.selectionForField "(Maybe String)" "company" [] (Decode.string |> Decode.nullable)


{-| The user's public profile company as HTML.
-}
companyHTML : SelectionSet ElmGithub.ScalarCodecs.Html ElmGithub.Object.User
companyHTML =
    Object.selectionForField "ScalarCodecs.Html" "companyHTML" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


type alias ContributionsCollectionOptionalArguments =
    { organizationID : OptionalArgument ElmGithub.ScalarCodecs.Id
    , from : OptionalArgument ElmGithub.ScalarCodecs.DateTime
    , to : OptionalArgument ElmGithub.ScalarCodecs.DateTime
    }


{-| The collection of contributions this user has made to different repositories.

  - organizationID - The ID of the organization used to filter contributions.
  - from - Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
  - to - Only contributions made before and up to and including this time will be
    counted. If omitted, defaults to the current time.

-}
contributionsCollection : (ContributionsCollectionOptionalArguments -> ContributionsCollectionOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.ContributionsCollection -> SelectionSet decodesTo ElmGithub.Object.User
contributionsCollection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { organizationID = Absent, from = Absent, to = Absent }

        optionalArgs =
            [ Argument.optional "organizationID" filledInOptionals.organizationID (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId), Argument.optional "from" filledInOptionals.from (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecDateTime), Argument.optional "to" filledInOptionals.to (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecDateTime) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "contributionsCollection" optionalArgs object_ identity


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet ElmGithub.ScalarCodecs.DateTime ElmGithub.Object.User
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) ElmGithub.Object.User
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The user's publicly visible profile email.
-}
email : SelectionSet String ElmGithub.Object.User
email =
    Object.selectionForField "String" "email" [] Decode.string


type alias FollowersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users the given user is followed by.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
followers : (FollowersOptionalArguments -> FollowersOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.FollowerConnection -> SelectionSet decodesTo ElmGithub.Object.User
followers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "followers" optionalArgs object_ identity


type alias FollowingOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users the given user is following.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
following : (FollowingOptionalArguments -> FollowingOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.FollowingConnection -> SelectionSet decodesTo ElmGithub.Object.User
following fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "following" optionalArgs object_ identity


type alias GistRequiredArguments =
    { name : String }


{-| Find gist by repo name.

  - name - The gist name to find.

-}
gist : GistRequiredArguments -> SelectionSet decodesTo ElmGithub.Object.Gist -> SelectionSet (Maybe decodesTo) ElmGithub.Object.User
gist requiredArgs object_ =
    Object.selectionForCompositeField "gist" [ Argument.required "name" requiredArgs.name Encode.string ] object_ (identity >> Decode.nullable)


type alias GistCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of gist comments made by this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
gistComments : (GistCommentsOptionalArguments -> GistCommentsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.GistCommentConnection -> SelectionSet decodesTo ElmGithub.Object.User
gistComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "gistComments" optionalArgs object_ identity


type alias GistsOptionalArguments =
    { privacy : OptionalArgument ElmGithub.Enum.GistPrivacy.GistPrivacy
    , orderBy : OptionalArgument ElmGithub.InputObject.GistOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of the Gists the user has created.

  - privacy - Filters Gists according to privacy.
  - orderBy - Ordering options for gists returned from the connection
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
gists : (GistsOptionalArguments -> GistsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.GistConnection -> SelectionSet decodesTo ElmGithub.Object.User
gists fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { privacy = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "privacy" filledInOptionals.privacy (Encode.enum ElmGithub.Enum.GistPrivacy.toString), Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeGistOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "gists" optionalArgs object_ identity


{-| -}
id : SelectionSet ElmGithub.ScalarCodecs.Id ElmGithub.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether or not this user is a participant in the GitHub Security Bug Bounty.
-}
isBountyHunter : SelectionSet Bool ElmGithub.Object.User
isBountyHunter =
    Object.selectionForField "Bool" "isBountyHunter" [] Decode.bool


{-| Whether or not this user is a participant in the GitHub Campus Experts Program.
-}
isCampusExpert : SelectionSet Bool ElmGithub.Object.User
isCampusExpert =
    Object.selectionForField "Bool" "isCampusExpert" [] Decode.bool


{-| Whether or not this user is a GitHub Developer Program member.
-}
isDeveloperProgramMember : SelectionSet Bool ElmGithub.Object.User
isDeveloperProgramMember =
    Object.selectionForField "Bool" "isDeveloperProgramMember" [] Decode.bool


{-| Whether or not this user is a GitHub employee.
-}
isEmployee : SelectionSet Bool ElmGithub.Object.User
isEmployee =
    Object.selectionForField "Bool" "isEmployee" [] Decode.bool


{-| Whether or not the user has marked themselves as for hire.
-}
isHireable : SelectionSet Bool ElmGithub.Object.User
isHireable =
    Object.selectionForField "Bool" "isHireable" [] Decode.bool


{-| Whether or not this user is a site administrator.
-}
isSiteAdmin : SelectionSet Bool ElmGithub.Object.User
isSiteAdmin =
    Object.selectionForField "Bool" "isSiteAdmin" [] Decode.bool


{-| Whether or not this user is the viewing user.
-}
isViewer : SelectionSet Bool ElmGithub.Object.User
isViewer =
    Object.selectionForField "Bool" "isViewer" [] Decode.bool


type alias IssueCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issue comments made by this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
issueComments : (IssueCommentsOptionalArguments -> IssueCommentsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.IssueCommentConnection -> SelectionSet decodesTo ElmGithub.Object.User
issueComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "issueComments" optionalArgs object_ identity


type alias IssuesOptionalArguments =
    { orderBy : OptionalArgument ElmGithub.InputObject.IssueOrder
    , labels : OptionalArgument (List String)
    , states : OptionalArgument (List ElmGithub.Enum.IssueState.IssueState)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issues associated with this user.

  - orderBy - Ordering options for issues returned from the connection.
  - labels - A list of label names to filter the pull requests by.
  - states - A list of states to filter the issues by.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
issues : (IssuesOptionalArguments -> IssuesOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.IssueConnection -> SelectionSet decodesTo ElmGithub.Object.User
issues fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { orderBy = Absent, labels = Absent, states = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeIssueOrder, Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "states" filledInOptionals.states (Encode.enum ElmGithub.Enum.IssueState.toString |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "issues" optionalArgs object_ identity


{-| The user's public profile location.
-}
location : SelectionSet (Maybe String) ElmGithub.Object.User
location =
    Object.selectionForField "(Maybe String)" "location" [] (Decode.string |> Decode.nullable)


{-| The username used to login.
-}
login : SelectionSet String ElmGithub.Object.User
login =
    Object.selectionForField "String" "login" [] Decode.string


{-| The user's public profile name.
-}
name : SelectionSet (Maybe String) ElmGithub.Object.User
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


type alias OrganizationRequiredArguments =
    { login : String }


{-| Find an organization by its login that the user belongs to.

  - login - The login of the organization to find.

-}
organization : OrganizationRequiredArguments -> SelectionSet decodesTo ElmGithub.Object.Organization -> SelectionSet (Maybe decodesTo) ElmGithub.Object.User
organization requiredArgs object_ =
    Object.selectionForCompositeField "organization" [ Argument.required "login" requiredArgs.login Encode.string ] object_ (identity >> Decode.nullable)


type alias OrganizationsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of organizations the user belongs to.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
organizations : (OrganizationsOptionalArguments -> OrganizationsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.OrganizationConnection -> SelectionSet decodesTo ElmGithub.Object.User
organizations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "organizations" optionalArgs object_ identity


type alias PinnedRepositoriesOptionalArguments =
    { privacy : OptionalArgument ElmGithub.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument ElmGithub.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of repositories this user has pinned to their profile

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pinnedRepositories : (PinnedRepositoriesOptionalArguments -> PinnedRepositoriesOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.RepositoryConnection -> SelectionSet decodesTo ElmGithub.Object.User
pinnedRepositories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "privacy" filledInOptionals.privacy (Encode.enum ElmGithub.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum ElmGithub.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum ElmGithub.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pinnedRepositories" optionalArgs object_ identity


type alias ProjectRequiredArguments =
    { number : Int }


{-| Find project by number.

  - number - The project number to find.

-}
project : ProjectRequiredArguments -> SelectionSet decodesTo ElmGithub.Object.Project -> SelectionSet (Maybe decodesTo) ElmGithub.Object.User
project requiredArgs object_ =
    Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias ProjectsOptionalArguments =
    { orderBy : OptionalArgument ElmGithub.InputObject.ProjectOrder
    , search : OptionalArgument String
    , states : OptionalArgument (List ElmGithub.Enum.ProjectState.ProjectState)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projects : (ProjectsOptionalArguments -> ProjectsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.ProjectConnection -> SelectionSet decodesTo ElmGithub.Object.User
projects fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { orderBy = Absent, search = Absent, states = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeProjectOrder, Argument.optional "search" filledInOptionals.search Encode.string, Argument.optional "states" filledInOptionals.states (Encode.enum ElmGithub.Enum.ProjectState.toString |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "projects" optionalArgs object_ identity


{-| The HTTP path listing owners projects
-}
projectsResourcePath : SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Object.User
projectsResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "projectsResourcePath" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing owners projects
-}
projectsUrl : SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Object.User
projectsUrl =
    Object.selectionForField "ScalarCodecs.Uri" "projectsUrl" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias PublicKeysOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of public keys associated with this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
publicKeys : (PublicKeysOptionalArguments -> PublicKeysOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.PublicKeyConnection -> SelectionSet decodesTo ElmGithub.Object.User
publicKeys fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "publicKeys" optionalArgs object_ identity


type alias PullRequestsOptionalArguments =
    { states : OptionalArgument (List ElmGithub.Enum.PullRequestState.PullRequestState)
    , labels : OptionalArgument (List String)
    , headRefName : OptionalArgument String
    , baseRefName : OptionalArgument String
    , orderBy : OptionalArgument ElmGithub.InputObject.IssueOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of pull requests associated with this user.

  - states - A list of states to filter the pull requests by.
  - labels - A list of label names to filter the pull requests by.
  - headRefName - The head ref name to filter the pull requests by.
  - baseRefName - The base ref name to filter the pull requests by.
  - orderBy - Ordering options for pull requests returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pullRequests : (PullRequestsOptionalArguments -> PullRequestsOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.PullRequestConnection -> SelectionSet decodesTo ElmGithub.Object.User
pullRequests fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { states = Absent, labels = Absent, headRefName = Absent, baseRefName = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "states" filledInOptionals.states (Encode.enum ElmGithub.Enum.PullRequestState.toString |> Encode.list), Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "headRefName" filledInOptionals.headRefName Encode.string, Argument.optional "baseRefName" filledInOptionals.baseRefName Encode.string, Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeIssueOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pullRequests" optionalArgs object_ identity


type alias RepositoriesOptionalArguments =
    { privacy : OptionalArgument ElmGithub.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument ElmGithub.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , isFork : OptionalArgument Bool
    }


{-| A list of repositories that the user owns.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - isFork - If non-null, filters repositories according to whether they are forks of another repository

-}
repositories : (RepositoriesOptionalArguments -> RepositoriesOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.RepositoryConnection -> SelectionSet decodesTo ElmGithub.Object.User
repositories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent, isFork = Absent }

        optionalArgs =
            [ Argument.optional "privacy" filledInOptionals.privacy (Encode.enum ElmGithub.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum ElmGithub.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum ElmGithub.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "isFork" filledInOptionals.isFork Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "repositories" optionalArgs object_ identity


type alias RepositoriesContributedToOptionalArguments =
    { privacy : OptionalArgument ElmGithub.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument ElmGithub.InputObject.RepositoryOrder
    , isLocked : OptionalArgument Bool
    , includeUserRepositories : OptionalArgument Bool
    , contributionTypes : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryContributionType.RepositoryContributionType))
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of repositories that the user recently contributed to.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - includeUserRepositories - If true, include user repositories
  - contributionTypes - If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
repositoriesContributedTo : (RepositoriesContributedToOptionalArguments -> RepositoriesContributedToOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.RepositoryConnection -> SelectionSet decodesTo ElmGithub.Object.User
repositoriesContributedTo fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { privacy = Absent, orderBy = Absent, isLocked = Absent, includeUserRepositories = Absent, contributionTypes = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "privacy" filledInOptionals.privacy (Encode.enum ElmGithub.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeRepositoryOrder, Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "includeUserRepositories" filledInOptionals.includeUserRepositories Encode.bool, Argument.optional "contributionTypes" filledInOptionals.contributionTypes (Encode.enum ElmGithub.Enum.RepositoryContributionType.toString |> Encode.maybe |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "repositoriesContributedTo" optionalArgs object_ identity


type alias RepositoryRequiredArguments =
    { name : String }


{-| Find Repository.

  - name - Name of Repository to find.

-}
repository : RepositoryRequiredArguments -> SelectionSet decodesTo ElmGithub.Object.Repository -> SelectionSet (Maybe decodesTo) ElmGithub.Object.User
repository requiredArgs object_ =
    Object.selectionForCompositeField "repository" [ Argument.required "name" requiredArgs.name Encode.string ] object_ (identity >> Decode.nullable)


{-| The HTTP path for this user
-}
resourcePath : SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Object.User
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias StarredRepositoriesOptionalArguments =
    { ownedByViewer : OptionalArgument Bool
    , orderBy : OptionalArgument ElmGithub.InputObject.StarOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Repositories the user has starred.

  - ownedByViewer - Filters starred repositories to only return repositories owned by the viewer.
  - orderBy - Order for connection
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
starredRepositories : (StarredRepositoriesOptionalArguments -> StarredRepositoriesOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.StarredRepositoryConnection -> SelectionSet decodesTo ElmGithub.Object.User
starredRepositories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { ownedByViewer = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "ownedByViewer" filledInOptionals.ownedByViewer Encode.bool, Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeStarOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "starredRepositories" optionalArgs object_ identity


{-| The user's description of what they're currently doing.
-}
status : SelectionSet decodesTo ElmGithub.Object.UserStatus -> SelectionSet (Maybe decodesTo) ElmGithub.Object.User
status object_ =
    Object.selectionForCompositeField "status" [] object_ (identity >> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet ElmGithub.ScalarCodecs.DateTime ElmGithub.Object.User
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this user
-}
url : SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Object.User
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet Bool ElmGithub.Object.User
viewerCanCreateProjects =
    Object.selectionForField "Bool" "viewerCanCreateProjects" [] Decode.bool


{-| Whether or not the viewer is able to follow the user.
-}
viewerCanFollow : SelectionSet Bool ElmGithub.Object.User
viewerCanFollow =
    Object.selectionForField "Bool" "viewerCanFollow" [] Decode.bool


{-| Whether or not this user is followed by the viewer.
-}
viewerIsFollowing : SelectionSet Bool ElmGithub.Object.User
viewerIsFollowing =
    Object.selectionForField "Bool" "viewerIsFollowing" [] Decode.bool


type alias WatchingOptionalArguments =
    { privacy : OptionalArgument ElmGithub.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument ElmGithub.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe ElmGithub.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of repositories the given user is watching.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Affiliation options for repositories returned from the connection
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
watching : (WatchingOptionalArguments -> WatchingOptionalArguments) -> SelectionSet decodesTo ElmGithub.Object.RepositoryConnection -> SelectionSet decodesTo ElmGithub.Object.User
watching fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "privacy" filledInOptionals.privacy (Encode.enum ElmGithub.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals.orderBy ElmGithub.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum ElmGithub.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum ElmGithub.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "watching" optionalArgs object_ identity


{-| A URL pointing to the user's public website/blog.
-}
websiteUrl : SelectionSet (Maybe ElmGithub.ScalarCodecs.Uri) ElmGithub.Object.User
websiteUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "websiteUrl" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)
