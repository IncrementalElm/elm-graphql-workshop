-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ElmGithub.Object.GitActor exposing (AvatarUrlOptionalArguments, avatarUrl, date, email, name, user)

import ElmGithub.InputObject
import ElmGithub.Interface
import ElmGithub.Object
import ElmGithub.Scalar
import ElmGithub.ScalarCodecs
import ElmGithub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


{-| A URL pointing to the author's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> SelectionSet ElmGithub.ScalarCodecs.Uri ElmGithub.Object.GitActor
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Uri" "avatarUrl" optionalArgs (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The timestamp of the Git action (authoring or committing).
-}
date : SelectionSet (Maybe ElmGithub.ScalarCodecs.GitTimestamp) ElmGithub.Object.GitActor
date =
    Object.selectionForField "(Maybe ScalarCodecs.GitTimestamp)" "date" [] (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapCodecs |> .codecGitTimestamp |> .decoder |> Decode.nullable)


{-| The email in the Git commit.
-}
email : SelectionSet (Maybe String) ElmGithub.Object.GitActor
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


{-| The name in the Git commit.
-}
name : SelectionSet (Maybe String) ElmGithub.Object.GitActor
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| The GitHub user corresponding to the email field. Null if no such user exists.
-}
user : SelectionSet decodesTo ElmGithub.Object.User -> SelectionSet (Maybe decodesTo) ElmGithub.Object.GitActor
user object_ =
    Object.selectionForCompositeField "user" [] object_ (identity >> Decode.nullable)
