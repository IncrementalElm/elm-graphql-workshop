-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ElmGithub.InputObject exposing (AcceptBusinessMemberInvitationInput, AcceptBusinessMemberInvitationInputOptionalFields, AcceptBusinessMemberInvitationInputRequiredFields, AcceptTopicSuggestionInput, AcceptTopicSuggestionInputOptionalFields, AcceptTopicSuggestionInputRequiredFields, AddCommentInput, AddCommentInputOptionalFields, AddCommentInputRequiredFields, AddProjectCardInput, AddProjectCardInputOptionalFields, AddProjectCardInputRequiredFields, AddProjectColumnInput, AddProjectColumnInputOptionalFields, AddProjectColumnInputRequiredFields, AddPullRequestReviewCommentInput, AddPullRequestReviewCommentInputOptionalFields, AddPullRequestReviewCommentInputRequiredFields, AddPullRequestReviewInput, AddPullRequestReviewInputOptionalFields, AddPullRequestReviewInputRequiredFields, AddReactionInput, AddReactionInputOptionalFields, AddReactionInputRequiredFields, AddStarInput, AddStarInputOptionalFields, AddStarInputRequiredFields, CancelBusinessAdminInvitationInput, CancelBusinessAdminInvitationInputOptionalFields, CancelBusinessAdminInvitationInputRequiredFields, CancelBusinessBillingManagerInvitationInput, CancelBusinessBillingManagerInvitationInputOptionalFields, CancelBusinessBillingManagerInvitationInputRequiredFields, ChangeUserStatusInput, ChangeUserStatusInputOptionalFields, CommitAuthor, CommitAuthorOptionalFields, CreateBranchProtectionRuleInput, CreateBranchProtectionRuleInputOptionalFields, CreateBranchProtectionRuleInputRequiredFields, CreateContentAttachmentInput, CreateContentAttachmentInputOptionalFields, CreateContentAttachmentInputRequiredFields, CreateProjectInput, CreateProjectInputOptionalFields, CreateProjectInputRequiredFields, DeclineTopicSuggestionInput, DeclineTopicSuggestionInputOptionalFields, DeclineTopicSuggestionInputRequiredFields, DeleteBranchProtectionRuleInput, DeleteBranchProtectionRuleInputOptionalFields, DeleteBranchProtectionRuleInputRequiredFields, DeleteIssueInput, DeleteIssueInputOptionalFields, DeleteIssueInputRequiredFields, DeleteProjectCardInput, DeleteProjectCardInputOptionalFields, DeleteProjectCardInputRequiredFields, DeleteProjectColumnInput, DeleteProjectColumnInputOptionalFields, DeleteProjectColumnInputRequiredFields, DeleteProjectInput, DeleteProjectInputOptionalFields, DeleteProjectInputRequiredFields, DeletePullRequestReviewInput, DeletePullRequestReviewInputOptionalFields, DeletePullRequestReviewInputRequiredFields, DeploymentOrder, DeploymentOrderRequiredFields, DismissPullRequestReviewInput, DismissPullRequestReviewInputOptionalFields, DismissPullRequestReviewInputRequiredFields, DraftPullRequestReviewComment, DraftPullRequestReviewCommentRequiredFields, GistOrder, GistOrderRequiredFields, InviteBusinessAdminInput, InviteBusinessAdminInputOptionalFields, InviteBusinessAdminInputRequiredFields, InviteBusinessBillingManagerInput, InviteBusinessBillingManagerInputOptionalFields, InviteBusinessBillingManagerInputRequiredFields, IssueOrder, IssueOrderRequiredFields, LanguageOrder, LanguageOrderRequiredFields, LockLockableInput, LockLockableInputOptionalFields, LockLockableInputRequiredFields, MilestoneOrder, MilestoneOrderRequiredFields, MinimizeCommentInput, MinimizeCommentInputOptionalFields, MinimizeCommentInputRequiredFields, MoveProjectCardInput, MoveProjectCardInputOptionalFields, MoveProjectCardInputRequiredFields, MoveProjectColumnInput, MoveProjectColumnInputOptionalFields, MoveProjectColumnInputRequiredFields, PinIssueInput, PinIssueInputOptionalFields, PinIssueInputRequiredFields, ProjectOrder, ProjectOrderRequiredFields, PullRequestOrder, PullRequestOrderRequiredFields, ReactionOrder, ReactionOrderRequiredFields, RefOrder, RefOrderRequiredFields, RegenerateBusinessIdentityProviderRecoveryCodesInput, RegenerateBusinessIdentityProviderRecoveryCodesInputOptionalFields, RegenerateBusinessIdentityProviderRecoveryCodesInputRequiredFields, ReleaseOrder, ReleaseOrderRequiredFields, RemoveBusinessAdminInput, RemoveBusinessAdminInputOptionalFields, RemoveBusinessAdminInputRequiredFields, RemoveBusinessBillingManagerInput, RemoveBusinessBillingManagerInputOptionalFields, RemoveBusinessBillingManagerInputRequiredFields, RemoveBusinessIdentityProviderInput, RemoveBusinessIdentityProviderInputOptionalFields, RemoveBusinessIdentityProviderInputRequiredFields, RemoveOutsideCollaboratorInput, RemoveOutsideCollaboratorInputOptionalFields, RemoveOutsideCollaboratorInputRequiredFields, RemoveReactionInput, RemoveReactionInputOptionalFields, RemoveReactionInputRequiredFields, RemoveStarInput, RemoveStarInputOptionalFields, RemoveStarInputRequiredFields, RepositoryOrder, RepositoryOrderRequiredFields, RequestReviewsInput, RequestReviewsInputOptionalFields, RequestReviewsInputRequiredFields, ResolveReviewThreadInput, ResolveReviewThreadInputOptionalFields, ResolveReviewThreadInputRequiredFields, SecurityAdvisoryIdentifierFilter, SecurityAdvisoryIdentifierFilterRequiredFields, SecurityAdvisoryOrder, SecurityAdvisoryOrderRequiredFields, SecurityVulnerabilityOrder, SecurityVulnerabilityOrderRequiredFields, SetBusinessIdentityProviderInput, SetBusinessIdentityProviderInputOptionalFields, SetBusinessIdentityProviderInputRequiredFields, StarOrder, StarOrderRequiredFields, SubmitPullRequestReviewInput, SubmitPullRequestReviewInputOptionalFields, SubmitPullRequestReviewInputRequiredFields, TeamMemberOrder, TeamMemberOrderRequiredFields, TeamOrder, TeamOrderRequiredFields, TeamRepositoryOrder, TeamRepositoryOrderRequiredFields, UnlockLockableInput, UnlockLockableInputOptionalFields, UnlockLockableInputRequiredFields, UnminimizeCommentInput, UnminimizeCommentInputOptionalFields, UnminimizeCommentInputRequiredFields, UnpinIssueInput, UnpinIssueInputOptionalFields, UnpinIssueInputRequiredFields, UnresolveReviewThreadInput, UnresolveReviewThreadInputOptionalFields, UnresolveReviewThreadInputRequiredFields, UpdateBranchProtectionRuleInput, UpdateBranchProtectionRuleInputOptionalFields, UpdateBranchProtectionRuleInputRequiredFields, UpdateBusinessAllowPrivateRepositoryForkingSettingInput, UpdateBusinessAllowPrivateRepositoryForkingSettingInputOptionalFields, UpdateBusinessAllowPrivateRepositoryForkingSettingInputRequiredFields, UpdateBusinessDefaultRepositoryPermissionSettingInput, UpdateBusinessDefaultRepositoryPermissionSettingInputOptionalFields, UpdateBusinessDefaultRepositoryPermissionSettingInputRequiredFields, UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput, UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputOptionalFields, UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputRequiredFields, UpdateBusinessMembersCanCreateRepositoriesSettingInput, UpdateBusinessMembersCanCreateRepositoriesSettingInputOptionalFields, UpdateBusinessMembersCanCreateRepositoriesSettingInputRequiredFields, UpdateBusinessMembersCanDeleteIssuesSettingInput, UpdateBusinessMembersCanDeleteIssuesSettingInputOptionalFields, UpdateBusinessMembersCanDeleteIssuesSettingInputRequiredFields, UpdateBusinessMembersCanDeleteRepositoriesSettingInput, UpdateBusinessMembersCanDeleteRepositoriesSettingInputOptionalFields, UpdateBusinessMembersCanDeleteRepositoriesSettingInputRequiredFields, UpdateBusinessMembersCanInviteCollaboratorsSettingInput, UpdateBusinessMembersCanInviteCollaboratorsSettingInputOptionalFields, UpdateBusinessMembersCanInviteCollaboratorsSettingInputRequiredFields, UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput, UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputOptionalFields, UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputRequiredFields, UpdateBusinessOrganizationProjectsSettingInput, UpdateBusinessOrganizationProjectsSettingInputOptionalFields, UpdateBusinessOrganizationProjectsSettingInputRequiredFields, UpdateBusinessProfileInput, UpdateBusinessProfileInputOptionalFields, UpdateBusinessProfileInputRequiredFields, UpdateBusinessRepositoryProjectsSettingInput, UpdateBusinessRepositoryProjectsSettingInputOptionalFields, UpdateBusinessRepositoryProjectsSettingInputRequiredFields, UpdateBusinessTeamDiscussionsSettingInput, UpdateBusinessTeamDiscussionsSettingInputOptionalFields, UpdateBusinessTeamDiscussionsSettingInputRequiredFields, UpdateBusinessTwoFactorAuthenticationRequiredSettingInput, UpdateBusinessTwoFactorAuthenticationRequiredSettingInputOptionalFields, UpdateBusinessTwoFactorAuthenticationRequiredSettingInputRequiredFields, UpdateProjectCardInput, UpdateProjectCardInputOptionalFields, UpdateProjectCardInputRequiredFields, UpdateProjectColumnInput, UpdateProjectColumnInputOptionalFields, UpdateProjectColumnInputRequiredFields, UpdateProjectInput, UpdateProjectInputOptionalFields, UpdateProjectInputRequiredFields, UpdatePullRequestReviewCommentInput, UpdatePullRequestReviewCommentInputOptionalFields, UpdatePullRequestReviewCommentInputRequiredFields, UpdatePullRequestReviewInput, UpdatePullRequestReviewInputOptionalFields, UpdatePullRequestReviewInputRequiredFields, UpdateSubscriptionInput, UpdateSubscriptionInputOptionalFields, UpdateSubscriptionInputRequiredFields, UpdateTopicsInput, UpdateTopicsInputOptionalFields, UpdateTopicsInputRequiredFields, UserStatusOrder, UserStatusOrderRequiredFields, buildAcceptBusinessMemberInvitationInput, buildAcceptTopicSuggestionInput, buildAddCommentInput, buildAddProjectCardInput, buildAddProjectColumnInput, buildAddPullRequestReviewCommentInput, buildAddPullRequestReviewInput, buildAddReactionInput, buildAddStarInput, buildCancelBusinessAdminInvitationInput, buildCancelBusinessBillingManagerInvitationInput, buildChangeUserStatusInput, buildCommitAuthor, buildCreateBranchProtectionRuleInput, buildCreateContentAttachmentInput, buildCreateProjectInput, buildDeclineTopicSuggestionInput, buildDeleteBranchProtectionRuleInput, buildDeleteIssueInput, buildDeleteProjectCardInput, buildDeleteProjectColumnInput, buildDeleteProjectInput, buildDeletePullRequestReviewInput, buildDeploymentOrder, buildDismissPullRequestReviewInput, buildDraftPullRequestReviewComment, buildGistOrder, buildInviteBusinessAdminInput, buildInviteBusinessBillingManagerInput, buildIssueOrder, buildLanguageOrder, buildLockLockableInput, buildMilestoneOrder, buildMinimizeCommentInput, buildMoveProjectCardInput, buildMoveProjectColumnInput, buildPinIssueInput, buildProjectOrder, buildPullRequestOrder, buildReactionOrder, buildRefOrder, buildRegenerateBusinessIdentityProviderRecoveryCodesInput, buildReleaseOrder, buildRemoveBusinessAdminInput, buildRemoveBusinessBillingManagerInput, buildRemoveBusinessIdentityProviderInput, buildRemoveOutsideCollaboratorInput, buildRemoveReactionInput, buildRemoveStarInput, buildRepositoryOrder, buildRequestReviewsInput, buildResolveReviewThreadInput, buildSecurityAdvisoryIdentifierFilter, buildSecurityAdvisoryOrder, buildSecurityVulnerabilityOrder, buildSetBusinessIdentityProviderInput, buildStarOrder, buildSubmitPullRequestReviewInput, buildTeamMemberOrder, buildTeamOrder, buildTeamRepositoryOrder, buildUnlockLockableInput, buildUnminimizeCommentInput, buildUnpinIssueInput, buildUnresolveReviewThreadInput, buildUpdateBranchProtectionRuleInput, buildUpdateBusinessAllowPrivateRepositoryForkingSettingInput, buildUpdateBusinessDefaultRepositoryPermissionSettingInput, buildUpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput, buildUpdateBusinessMembersCanCreateRepositoriesSettingInput, buildUpdateBusinessMembersCanDeleteIssuesSettingInput, buildUpdateBusinessMembersCanDeleteRepositoriesSettingInput, buildUpdateBusinessMembersCanInviteCollaboratorsSettingInput, buildUpdateBusinessMembersCanUpdateProtectedBranchesSettingInput, buildUpdateBusinessOrganizationProjectsSettingInput, buildUpdateBusinessProfileInput, buildUpdateBusinessRepositoryProjectsSettingInput, buildUpdateBusinessTeamDiscussionsSettingInput, buildUpdateBusinessTwoFactorAuthenticationRequiredSettingInput, buildUpdateProjectCardInput, buildUpdateProjectColumnInput, buildUpdateProjectInput, buildUpdatePullRequestReviewCommentInput, buildUpdatePullRequestReviewInput, buildUpdateSubscriptionInput, buildUpdateTopicsInput, buildUserStatusOrder, encodeAcceptBusinessMemberInvitationInput, encodeAcceptTopicSuggestionInput, encodeAddCommentInput, encodeAddProjectCardInput, encodeAddProjectColumnInput, encodeAddPullRequestReviewCommentInput, encodeAddPullRequestReviewInput, encodeAddReactionInput, encodeAddStarInput, encodeCancelBusinessAdminInvitationInput, encodeCancelBusinessBillingManagerInvitationInput, encodeChangeUserStatusInput, encodeCommitAuthor, encodeCreateBranchProtectionRuleInput, encodeCreateContentAttachmentInput, encodeCreateProjectInput, encodeDeclineTopicSuggestionInput, encodeDeleteBranchProtectionRuleInput, encodeDeleteIssueInput, encodeDeleteProjectCardInput, encodeDeleteProjectColumnInput, encodeDeleteProjectInput, encodeDeletePullRequestReviewInput, encodeDeploymentOrder, encodeDismissPullRequestReviewInput, encodeDraftPullRequestReviewComment, encodeGistOrder, encodeInviteBusinessAdminInput, encodeInviteBusinessBillingManagerInput, encodeIssueOrder, encodeLanguageOrder, encodeLockLockableInput, encodeMilestoneOrder, encodeMinimizeCommentInput, encodeMoveProjectCardInput, encodeMoveProjectColumnInput, encodePinIssueInput, encodeProjectOrder, encodePullRequestOrder, encodeReactionOrder, encodeRefOrder, encodeRegenerateBusinessIdentityProviderRecoveryCodesInput, encodeReleaseOrder, encodeRemoveBusinessAdminInput, encodeRemoveBusinessBillingManagerInput, encodeRemoveBusinessIdentityProviderInput, encodeRemoveOutsideCollaboratorInput, encodeRemoveReactionInput, encodeRemoveStarInput, encodeRepositoryOrder, encodeRequestReviewsInput, encodeResolveReviewThreadInput, encodeSecurityAdvisoryIdentifierFilter, encodeSecurityAdvisoryOrder, encodeSecurityVulnerabilityOrder, encodeSetBusinessIdentityProviderInput, encodeStarOrder, encodeSubmitPullRequestReviewInput, encodeTeamMemberOrder, encodeTeamOrder, encodeTeamRepositoryOrder, encodeUnlockLockableInput, encodeUnminimizeCommentInput, encodeUnpinIssueInput, encodeUnresolveReviewThreadInput, encodeUpdateBranchProtectionRuleInput, encodeUpdateBusinessAllowPrivateRepositoryForkingSettingInput, encodeUpdateBusinessDefaultRepositoryPermissionSettingInput, encodeUpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput, encodeUpdateBusinessMembersCanCreateRepositoriesSettingInput, encodeUpdateBusinessMembersCanDeleteIssuesSettingInput, encodeUpdateBusinessMembersCanDeleteRepositoriesSettingInput, encodeUpdateBusinessMembersCanInviteCollaboratorsSettingInput, encodeUpdateBusinessMembersCanUpdateProtectedBranchesSettingInput, encodeUpdateBusinessOrganizationProjectsSettingInput, encodeUpdateBusinessProfileInput, encodeUpdateBusinessRepositoryProjectsSettingInput, encodeUpdateBusinessTeamDiscussionsSettingInput, encodeUpdateBusinessTwoFactorAuthenticationRequiredSettingInput, encodeUpdateProjectCardInput, encodeUpdateProjectColumnInput, encodeUpdateProjectInput, encodeUpdatePullRequestReviewCommentInput, encodeUpdatePullRequestReviewInput, encodeUpdateSubscriptionInput, encodeUpdateTopicsInput, encodeUserStatusOrder)

import ElmGithub.Enum.DeploymentOrderField
import ElmGithub.Enum.GistOrderField
import ElmGithub.Enum.IssueOrderField
import ElmGithub.Enum.LanguageOrderField
import ElmGithub.Enum.LockReason
import ElmGithub.Enum.MilestoneOrderField
import ElmGithub.Enum.OrderDirection
import ElmGithub.Enum.ProjectOrderField
import ElmGithub.Enum.ProjectState
import ElmGithub.Enum.PullRequestOrderField
import ElmGithub.Enum.PullRequestReviewEvent
import ElmGithub.Enum.ReactionContent
import ElmGithub.Enum.ReactionOrderField
import ElmGithub.Enum.RefOrderField
import ElmGithub.Enum.ReleaseOrderField
import ElmGithub.Enum.ReportedContentClassifiers
import ElmGithub.Enum.RepositoryOrderField
import ElmGithub.Enum.SecurityAdvisoryIdentifierType
import ElmGithub.Enum.SecurityAdvisoryOrderField
import ElmGithub.Enum.SecurityVulnerabilityOrderField
import ElmGithub.Enum.StarOrderField
import ElmGithub.Enum.SubscriptionState
import ElmGithub.Enum.TeamMemberOrderField
import ElmGithub.Enum.TeamOrderField
import ElmGithub.Enum.TeamRepositoryOrderField
import ElmGithub.Enum.TopicSuggestionDeclineReason
import ElmGithub.Enum.UserStatusOrderField
import ElmGithub.Interface
import ElmGithub.Object
import ElmGithub.Scalar
import ElmGithub.ScalarCodecs
import ElmGithub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAcceptBusinessMemberInvitationInput : AcceptBusinessMemberInvitationInputRequiredFields -> (AcceptBusinessMemberInvitationInputOptionalFields -> AcceptBusinessMemberInvitationInputOptionalFields) -> AcceptBusinessMemberInvitationInput
buildAcceptBusinessMemberInvitationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { invitationId = required.invitationId, clientMutationId = optionals.clientMutationId }


type alias AcceptBusinessMemberInvitationInputRequiredFields =
    { invitationId : ElmGithub.ScalarCodecs.Id }


type alias AcceptBusinessMemberInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptBusinessMemberInvitationInput input object.
-}
type alias AcceptBusinessMemberInvitationInput =
    { invitationId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AcceptBusinessMemberInvitationInput into a value that can be used as an argument.
-}
encodeAcceptBusinessMemberInvitationInput : AcceptBusinessMemberInvitationInput -> Value
encodeAcceptBusinessMemberInvitationInput input =
    Encode.maybeObject
        [ ( "invitationId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAcceptTopicSuggestionInput : AcceptTopicSuggestionInputRequiredFields -> (AcceptTopicSuggestionInputOptionalFields -> AcceptTopicSuggestionInputOptionalFields) -> AcceptTopicSuggestionInput
buildAcceptTopicSuggestionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = required.name, clientMutationId = optionals.clientMutationId }


type alias AcceptTopicSuggestionInputRequiredFields =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , name : String
    }


type alias AcceptTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptTopicSuggestionInput input object.
-}
type alias AcceptTopicSuggestionInput =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AcceptTopicSuggestionInput into a value that can be used as an argument.
-}
encodeAcceptTopicSuggestionInput : AcceptTopicSuggestionInput -> Value
encodeAcceptTopicSuggestionInput input =
    Encode.maybeObject
        [ ( "repositoryId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddCommentInput : AddCommentInputRequiredFields -> (AddCommentInputOptionalFields -> AddCommentInputOptionalFields) -> AddCommentInput
buildAddCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias AddCommentInputRequiredFields =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , body : String
    }


type alias AddCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddCommentInput input object.
-}
type alias AddCommentInput =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddCommentInput into a value that can be used as an argument.
-}
encodeAddCommentInput : AddCommentInput -> Value
encodeAddCommentInput input =
    Encode.maybeObject
        [ ( "subjectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddProjectCardInput : AddProjectCardInputRequiredFields -> (AddProjectCardInputOptionalFields -> AddProjectCardInputOptionalFields) -> AddProjectCardInput
buildAddProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { contentId = Absent, note = Absent, clientMutationId = Absent }
    in
    { projectColumnId = required.projectColumnId, contentId = optionals.contentId, note = optionals.note, clientMutationId = optionals.clientMutationId }


type alias AddProjectCardInputRequiredFields =
    { projectColumnId : ElmGithub.ScalarCodecs.Id }


type alias AddProjectCardInputOptionalFields =
    { contentId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddProjectCardInput input object.
-}
type alias AddProjectCardInput =
    { projectColumnId : ElmGithub.ScalarCodecs.Id
    , contentId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectCardInput into a value that can be used as an argument.
-}
encodeAddProjectCardInput : AddProjectCardInput -> Value
encodeAddProjectCardInput input =
    Encode.maybeObject
        [ ( "projectColumnId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.projectColumnId |> Just ), ( "contentId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "note", Encode.string |> Encode.optional input.note ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddProjectColumnInput : AddProjectColumnInputRequiredFields -> (AddProjectColumnInputOptionalFields -> AddProjectColumnInputOptionalFields) -> AddProjectColumnInput
buildAddProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectId = required.projectId, name = required.name, clientMutationId = optionals.clientMutationId }


type alias AddProjectColumnInputRequiredFields =
    { projectId : ElmGithub.ScalarCodecs.Id
    , name : String
    }


type alias AddProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddProjectColumnInput input object.
-}
type alias AddProjectColumnInput =
    { projectId : ElmGithub.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectColumnInput into a value that can be used as an argument.
-}
encodeAddProjectColumnInput : AddProjectColumnInput -> Value
encodeAddProjectColumnInput input =
    Encode.maybeObject
        [ ( "projectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "name", Encode.string input.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddPullRequestReviewCommentInput : AddPullRequestReviewCommentInputRequiredFields -> (AddPullRequestReviewCommentInputOptionalFields -> AddPullRequestReviewCommentInputOptionalFields) -> AddPullRequestReviewCommentInput
buildAddPullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { commitOID = Absent, path = Absent, position = Absent, inReplyTo = Absent, clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, commitOID = optionals.commitOID, body = required.body, path = optionals.path, position = optionals.position, inReplyTo = optionals.inReplyTo, clientMutationId = optionals.clientMutationId }


type alias AddPullRequestReviewCommentInputRequiredFields =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , body : String
    }


type alias AddPullRequestReviewCommentInputOptionalFields =
    { commitOID : OptionalArgument ElmGithub.ScalarCodecs.GitObjectID
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewCommentInput input object.
-}
type alias AddPullRequestReviewCommentInput =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , commitOID : OptionalArgument ElmGithub.ScalarCodecs.GitObjectID
    , body : String
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewCommentInput : AddPullRequestReviewCommentInput -> Value
encodeAddPullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "commitOID", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.commitOID ), ( "body", Encode.string input.body |> Just ), ( "path", Encode.string |> Encode.optional input.path ), ( "position", Encode.int |> Encode.optional input.position ), ( "inReplyTo", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.optional input.inReplyTo ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddPullRequestReviewInput : AddPullRequestReviewInputRequiredFields -> (AddPullRequestReviewInputOptionalFields -> AddPullRequestReviewInputOptionalFields) -> AddPullRequestReviewInput
buildAddPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { commitOID = Absent, body = Absent, event = Absent, comments = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, commitOID = optionals.commitOID, body = optionals.body, event = optionals.event, comments = optionals.comments, clientMutationId = optionals.clientMutationId }


type alias AddPullRequestReviewInputRequiredFields =
    { pullRequestId : ElmGithub.ScalarCodecs.Id }


type alias AddPullRequestReviewInputOptionalFields =
    { commitOID : OptionalArgument ElmGithub.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument ElmGithub.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewInput input object.
-}
type alias AddPullRequestReviewInput =
    { pullRequestId : ElmGithub.ScalarCodecs.Id
    , commitOID : OptionalArgument ElmGithub.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument ElmGithub.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewInput : AddPullRequestReviewInput -> Value
encodeAddPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "commitOID", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.commitOID ), ( "body", Encode.string |> Encode.optional input.body ), ( "event", Encode.enum ElmGithub.Enum.PullRequestReviewEvent.toString |> Encode.optional input.event ), ( "comments", (encodeDraftPullRequestReviewComment |> Encode.maybe |> Encode.list) |> Encode.optional input.comments ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddReactionInput : AddReactionInputRequiredFields -> (AddReactionInputOptionalFields -> AddReactionInputOptionalFields) -> AddReactionInput
buildAddReactionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, content = required.content, clientMutationId = optionals.clientMutationId }


type alias AddReactionInputRequiredFields =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , content : ElmGithub.Enum.ReactionContent.ReactionContent
    }


type alias AddReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddReactionInput input object.
-}
type alias AddReactionInput =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , content : ElmGithub.Enum.ReactionContent.ReactionContent
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddReactionInput into a value that can be used as an argument.
-}
encodeAddReactionInput : AddReactionInput -> Value
encodeAddReactionInput input =
    Encode.maybeObject
        [ ( "subjectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "content", Encode.enum ElmGithub.Enum.ReactionContent.toString input.content |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddStarInput : AddStarInputRequiredFields -> (AddStarInputOptionalFields -> AddStarInputOptionalFields) -> AddStarInput
buildAddStarInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { starrableId = required.starrableId, clientMutationId = optionals.clientMutationId }


type alias AddStarInputRequiredFields =
    { starrableId : ElmGithub.ScalarCodecs.Id }


type alias AddStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddStarInput input object.
-}
type alias AddStarInput =
    { starrableId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddStarInput into a value that can be used as an argument.
-}
encodeAddStarInput : AddStarInput -> Value
encodeAddStarInput input =
    Encode.maybeObject
        [ ( "starrableId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.starrableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCancelBusinessAdminInvitationInput : CancelBusinessAdminInvitationInputRequiredFields -> (CancelBusinessAdminInvitationInputOptionalFields -> CancelBusinessAdminInvitationInputOptionalFields) -> CancelBusinessAdminInvitationInput
buildCancelBusinessAdminInvitationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { invitationId = required.invitationId, clientMutationId = optionals.clientMutationId }


type alias CancelBusinessAdminInvitationInputRequiredFields =
    { invitationId : ElmGithub.ScalarCodecs.Id }


type alias CancelBusinessAdminInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CancelBusinessAdminInvitationInput input object.
-}
type alias CancelBusinessAdminInvitationInput =
    { invitationId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CancelBusinessAdminInvitationInput into a value that can be used as an argument.
-}
encodeCancelBusinessAdminInvitationInput : CancelBusinessAdminInvitationInput -> Value
encodeCancelBusinessAdminInvitationInput input =
    Encode.maybeObject
        [ ( "invitationId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCancelBusinessBillingManagerInvitationInput : CancelBusinessBillingManagerInvitationInputRequiredFields -> (CancelBusinessBillingManagerInvitationInputOptionalFields -> CancelBusinessBillingManagerInvitationInputOptionalFields) -> CancelBusinessBillingManagerInvitationInput
buildCancelBusinessBillingManagerInvitationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { invitationId = required.invitationId, clientMutationId = optionals.clientMutationId }


type alias CancelBusinessBillingManagerInvitationInputRequiredFields =
    { invitationId : ElmGithub.ScalarCodecs.Id }


type alias CancelBusinessBillingManagerInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CancelBusinessBillingManagerInvitationInput input object.
-}
type alias CancelBusinessBillingManagerInvitationInput =
    { invitationId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CancelBusinessBillingManagerInvitationInput into a value that can be used as an argument.
-}
encodeCancelBusinessBillingManagerInvitationInput : CancelBusinessBillingManagerInvitationInput -> Value
encodeCancelBusinessBillingManagerInvitationInput input =
    Encode.maybeObject
        [ ( "invitationId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildChangeUserStatusInput : (ChangeUserStatusInputOptionalFields -> ChangeUserStatusInputOptionalFields) -> ChangeUserStatusInput
buildChangeUserStatusInput fillOptionals =
    let
        optionals =
            fillOptionals
                { emoji = Absent, message = Absent, organizationId = Absent, limitedAvailability = Absent, clientMutationId = Absent }
    in
    { emoji = optionals.emoji, message = optionals.message, organizationId = optionals.organizationId, limitedAvailability = optionals.limitedAvailability, clientMutationId = optionals.clientMutationId }


type alias ChangeUserStatusInputOptionalFields =
    { emoji : OptionalArgument String
    , message : OptionalArgument String
    , organizationId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , limitedAvailability : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the ChangeUserStatusInput input object.
-}
type alias ChangeUserStatusInput =
    { emoji : OptionalArgument String
    , message : OptionalArgument String
    , organizationId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , limitedAvailability : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ChangeUserStatusInput into a value that can be used as an argument.
-}
encodeChangeUserStatusInput : ChangeUserStatusInput -> Value
encodeChangeUserStatusInput input =
    Encode.maybeObject
        [ ( "emoji", Encode.string |> Encode.optional input.emoji ), ( "message", Encode.string |> Encode.optional input.message ), ( "organizationId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.optional input.organizationId ), ( "limitedAvailability", Encode.bool |> Encode.optional input.limitedAvailability ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCommitAuthor : (CommitAuthorOptionalFields -> CommitAuthorOptionalFields) -> CommitAuthor
buildCommitAuthor fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, emails = Absent }
    in
    { id = optionals.id, emails = optionals.emails }


type alias CommitAuthorOptionalFields =
    { id : OptionalArgument ElmGithub.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Type for the CommitAuthor input object.
-}
type alias CommitAuthor =
    { id : OptionalArgument ElmGithub.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Encode a CommitAuthor into a value that can be used as an argument.
-}
encodeCommitAuthor : CommitAuthor -> Value
encodeCommitAuthor input =
    Encode.maybeObject
        [ ( "id", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "emails", (Encode.string |> Encode.list) |> Encode.optional input.emails ) ]


buildCreateBranchProtectionRuleInput : CreateBranchProtectionRuleInputRequiredFields -> (CreateBranchProtectionRuleInputOptionalFields -> CreateBranchProtectionRuleInputOptionalFields) -> CreateBranchProtectionRuleInput
buildCreateBranchProtectionRuleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { requiresApprovingReviews = Absent, requiredApprovingReviewCount = Absent, requiresCommitSignatures = Absent, isAdminEnforced = Absent, requiresStatusChecks = Absent, requiresStrictStatusChecks = Absent, requiresCodeOwnerReviews = Absent, dismissesStaleReviews = Absent, restrictsReviewDismissals = Absent, reviewDismissalActorIds = Absent, restrictsPushes = Absent, pushActorIds = Absent, requiredStatusCheckContexts = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, pattern = required.pattern, requiresApprovingReviews = optionals.requiresApprovingReviews, requiredApprovingReviewCount = optionals.requiredApprovingReviewCount, requiresCommitSignatures = optionals.requiresCommitSignatures, isAdminEnforced = optionals.isAdminEnforced, requiresStatusChecks = optionals.requiresStatusChecks, requiresStrictStatusChecks = optionals.requiresStrictStatusChecks, requiresCodeOwnerReviews = optionals.requiresCodeOwnerReviews, dismissesStaleReviews = optionals.dismissesStaleReviews, restrictsReviewDismissals = optionals.restrictsReviewDismissals, reviewDismissalActorIds = optionals.reviewDismissalActorIds, restrictsPushes = optionals.restrictsPushes, pushActorIds = optionals.pushActorIds, requiredStatusCheckContexts = optionals.requiredStatusCheckContexts, clientMutationId = optionals.clientMutationId }


type alias CreateBranchProtectionRuleInputRequiredFields =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , pattern : String
    }


type alias CreateBranchProtectionRuleInputOptionalFields =
    { requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateBranchProtectionRuleInput input object.
-}
type alias CreateBranchProtectionRuleInput =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , pattern : String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeCreateBranchProtectionRuleInput : CreateBranchProtectionRuleInput -> Value
encodeCreateBranchProtectionRuleInput input =
    Encode.maybeObject
        [ ( "repositoryId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "pattern", Encode.string input.pattern |> Just ), ( "requiresApprovingReviews", Encode.bool |> Encode.optional input.requiresApprovingReviews ), ( "requiredApprovingReviewCount", Encode.int |> Encode.optional input.requiredApprovingReviewCount ), ( "requiresCommitSignatures", Encode.bool |> Encode.optional input.requiresCommitSignatures ), ( "isAdminEnforced", Encode.bool |> Encode.optional input.isAdminEnforced ), ( "requiresStatusChecks", Encode.bool |> Encode.optional input.requiresStatusChecks ), ( "requiresStrictStatusChecks", Encode.bool |> Encode.optional input.requiresStrictStatusChecks ), ( "requiresCodeOwnerReviews", Encode.bool |> Encode.optional input.requiresCodeOwnerReviews ), ( "dismissesStaleReviews", Encode.bool |> Encode.optional input.dismissesStaleReviews ), ( "restrictsReviewDismissals", Encode.bool |> Encode.optional input.restrictsReviewDismissals ), ( "reviewDismissalActorIds", ((ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.reviewDismissalActorIds ), ( "restrictsPushes", Encode.bool |> Encode.optional input.restrictsPushes ), ( "pushActorIds", ((ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.pushActorIds ), ( "requiredStatusCheckContexts", (Encode.string |> Encode.list) |> Encode.optional input.requiredStatusCheckContexts ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateContentAttachmentInput : CreateContentAttachmentInputRequiredFields -> (CreateContentAttachmentInputOptionalFields -> CreateContentAttachmentInputOptionalFields) -> CreateContentAttachmentInput
buildCreateContentAttachmentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { contentReferenceId = required.contentReferenceId, title = required.title, body = required.body, clientMutationId = optionals.clientMutationId }


type alias CreateContentAttachmentInputRequiredFields =
    { contentReferenceId : ElmGithub.ScalarCodecs.Id
    , title : String
    , body : String
    }


type alias CreateContentAttachmentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateContentAttachmentInput input object.
-}
type alias CreateContentAttachmentInput =
    { contentReferenceId : ElmGithub.ScalarCodecs.Id
    , title : String
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateContentAttachmentInput into a value that can be used as an argument.
-}
encodeCreateContentAttachmentInput : CreateContentAttachmentInput -> Value
encodeCreateContentAttachmentInput input =
    Encode.maybeObject
        [ ( "contentReferenceId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.contentReferenceId |> Just ), ( "title", Encode.string input.title |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateProjectInput : CreateProjectInputRequiredFields -> (CreateProjectInputOptionalFields -> CreateProjectInputOptionalFields) -> CreateProjectInput
buildCreateProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { body = Absent, clientMutationId = Absent }
    in
    { ownerId = required.ownerId, name = required.name, body = optionals.body, clientMutationId = optionals.clientMutationId }


type alias CreateProjectInputRequiredFields =
    { ownerId : ElmGithub.ScalarCodecs.Id
    , name : String
    }


type alias CreateProjectInputOptionalFields =
    { body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateProjectInput input object.
-}
type alias CreateProjectInput =
    { ownerId : ElmGithub.ScalarCodecs.Id
    , name : String
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateProjectInput into a value that can be used as an argument.
-}
encodeCreateProjectInput : CreateProjectInput -> Value
encodeCreateProjectInput input =
    Encode.maybeObject
        [ ( "ownerId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.ownerId |> Just ), ( "name", Encode.string input.name |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeclineTopicSuggestionInput : DeclineTopicSuggestionInputRequiredFields -> (DeclineTopicSuggestionInputOptionalFields -> DeclineTopicSuggestionInputOptionalFields) -> DeclineTopicSuggestionInput
buildDeclineTopicSuggestionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = required.name, reason = required.reason, clientMutationId = optionals.clientMutationId }


type alias DeclineTopicSuggestionInputRequiredFields =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , name : String
    , reason : ElmGithub.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    }


type alias DeclineTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeclineTopicSuggestionInput input object.
-}
type alias DeclineTopicSuggestionInput =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , name : String
    , reason : ElmGithub.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeclineTopicSuggestionInput into a value that can be used as an argument.
-}
encodeDeclineTopicSuggestionInput : DeclineTopicSuggestionInput -> Value
encodeDeclineTopicSuggestionInput input =
    Encode.maybeObject
        [ ( "repositoryId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "reason", Encode.enum ElmGithub.Enum.TopicSuggestionDeclineReason.toString input.reason |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteBranchProtectionRuleInput : DeleteBranchProtectionRuleInputRequiredFields -> (DeleteBranchProtectionRuleInputOptionalFields -> DeleteBranchProtectionRuleInputOptionalFields) -> DeleteBranchProtectionRuleInput
buildDeleteBranchProtectionRuleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { branchProtectionRuleId = required.branchProtectionRuleId, clientMutationId = optionals.clientMutationId }


type alias DeleteBranchProtectionRuleInputRequiredFields =
    { branchProtectionRuleId : ElmGithub.ScalarCodecs.Id }


type alias DeleteBranchProtectionRuleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteBranchProtectionRuleInput input object.
-}
type alias DeleteBranchProtectionRuleInput =
    { branchProtectionRuleId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeDeleteBranchProtectionRuleInput : DeleteBranchProtectionRuleInput -> Value
encodeDeleteBranchProtectionRuleInput input =
    Encode.maybeObject
        [ ( "branchProtectionRuleId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.branchProtectionRuleId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteIssueInput : DeleteIssueInputRequiredFields -> (DeleteIssueInputOptionalFields -> DeleteIssueInputOptionalFields) -> DeleteIssueInput
buildDeleteIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, clientMutationId = optionals.clientMutationId }


type alias DeleteIssueInputRequiredFields =
    { issueId : ElmGithub.ScalarCodecs.Id }


type alias DeleteIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteIssueInput input object.
-}
type alias DeleteIssueInput =
    { issueId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteIssueInput into a value that can be used as an argument.
-}
encodeDeleteIssueInput : DeleteIssueInput -> Value
encodeDeleteIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteProjectCardInput : DeleteProjectCardInputRequiredFields -> (DeleteProjectCardInputOptionalFields -> DeleteProjectCardInputOptionalFields) -> DeleteProjectCardInput
buildDeleteProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { cardId = required.cardId, clientMutationId = optionals.clientMutationId }


type alias DeleteProjectCardInputRequiredFields =
    { cardId : ElmGithub.ScalarCodecs.Id }


type alias DeleteProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectCardInput input object.
-}
type alias DeleteProjectCardInput =
    { cardId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectCardInput into a value that can be used as an argument.
-}
encodeDeleteProjectCardInput : DeleteProjectCardInput -> Value
encodeDeleteProjectCardInput input =
    Encode.maybeObject
        [ ( "cardId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.cardId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteProjectColumnInput : DeleteProjectColumnInputRequiredFields -> (DeleteProjectColumnInputOptionalFields -> DeleteProjectColumnInputOptionalFields) -> DeleteProjectColumnInput
buildDeleteProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { columnId = required.columnId, clientMutationId = optionals.clientMutationId }


type alias DeleteProjectColumnInputRequiredFields =
    { columnId : ElmGithub.ScalarCodecs.Id }


type alias DeleteProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectColumnInput input object.
-}
type alias DeleteProjectColumnInput =
    { columnId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectColumnInput into a value that can be used as an argument.
-}
encodeDeleteProjectColumnInput : DeleteProjectColumnInput -> Value
encodeDeleteProjectColumnInput input =
    Encode.maybeObject
        [ ( "columnId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteProjectInput : DeleteProjectInputRequiredFields -> (DeleteProjectInputOptionalFields -> DeleteProjectInputOptionalFields) -> DeleteProjectInput
buildDeleteProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectId = required.projectId, clientMutationId = optionals.clientMutationId }


type alias DeleteProjectInputRequiredFields =
    { projectId : ElmGithub.ScalarCodecs.Id }


type alias DeleteProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectInput input object.
-}
type alias DeleteProjectInput =
    { projectId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectInput into a value that can be used as an argument.
-}
encodeDeleteProjectInput : DeleteProjectInput -> Value
encodeDeleteProjectInput input =
    Encode.maybeObject
        [ ( "projectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeletePullRequestReviewInput : DeletePullRequestReviewInputRequiredFields -> (DeletePullRequestReviewInputOptionalFields -> DeletePullRequestReviewInputOptionalFields) -> DeletePullRequestReviewInput
buildDeletePullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, clientMutationId = optionals.clientMutationId }


type alias DeletePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id }


type alias DeletePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeletePullRequestReviewInput input object.
-}
type alias DeletePullRequestReviewInput =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeletePullRequestReviewInput into a value that can be used as an argument.
-}
encodeDeletePullRequestReviewInput : DeletePullRequestReviewInput -> Value
encodeDeletePullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeploymentOrder : DeploymentOrderRequiredFields -> DeploymentOrder
buildDeploymentOrder required =
    { field = required.field, direction = required.direction }


type alias DeploymentOrderRequiredFields =
    { field : ElmGithub.Enum.DeploymentOrderField.DeploymentOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the DeploymentOrder input object.
-}
type alias DeploymentOrder =
    { field : ElmGithub.Enum.DeploymentOrderField.DeploymentOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a DeploymentOrder into a value that can be used as an argument.
-}
encodeDeploymentOrder : DeploymentOrder -> Value
encodeDeploymentOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.DeploymentOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildDismissPullRequestReviewInput : DismissPullRequestReviewInputRequiredFields -> (DismissPullRequestReviewInputOptionalFields -> DismissPullRequestReviewInputOptionalFields) -> DismissPullRequestReviewInput
buildDismissPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, message = required.message, clientMutationId = optionals.clientMutationId }


type alias DismissPullRequestReviewInputRequiredFields =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , message : String
    }


type alias DismissPullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DismissPullRequestReviewInput input object.
-}
type alias DismissPullRequestReviewInput =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , message : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DismissPullRequestReviewInput into a value that can be used as an argument.
-}
encodeDismissPullRequestReviewInput : DismissPullRequestReviewInput -> Value
encodeDismissPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "message", Encode.string input.message |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDraftPullRequestReviewComment : DraftPullRequestReviewCommentRequiredFields -> DraftPullRequestReviewComment
buildDraftPullRequestReviewComment required =
    { path = required.path, position = required.position, body = required.body }


type alias DraftPullRequestReviewCommentRequiredFields =
    { path : String
    , position : Int
    , body : String
    }


{-| Type for the DraftPullRequestReviewComment input object.
-}
type alias DraftPullRequestReviewComment =
    { path : String
    , position : Int
    , body : String
    }


{-| Encode a DraftPullRequestReviewComment into a value that can be used as an argument.
-}
encodeDraftPullRequestReviewComment : DraftPullRequestReviewComment -> Value
encodeDraftPullRequestReviewComment input =
    Encode.maybeObject
        [ ( "path", Encode.string input.path |> Just ), ( "position", Encode.int input.position |> Just ), ( "body", Encode.string input.body |> Just ) ]


buildGistOrder : GistOrderRequiredFields -> GistOrder
buildGistOrder required =
    { field = required.field, direction = required.direction }


type alias GistOrderRequiredFields =
    { field : ElmGithub.Enum.GistOrderField.GistOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the GistOrder input object.
-}
type alias GistOrder =
    { field : ElmGithub.Enum.GistOrderField.GistOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a GistOrder into a value that can be used as an argument.
-}
encodeGistOrder : GistOrder -> Value
encodeGistOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.GistOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildInviteBusinessAdminInput : InviteBusinessAdminInputRequiredFields -> (InviteBusinessAdminInputOptionalFields -> InviteBusinessAdminInputOptionalFields) -> InviteBusinessAdminInput
buildInviteBusinessAdminInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { invitee = Absent, email = Absent, clientMutationId = Absent }
    in
    { businessId = required.businessId, invitee = optionals.invitee, email = optionals.email, clientMutationId = optionals.clientMutationId }


type alias InviteBusinessAdminInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias InviteBusinessAdminInputOptionalFields =
    { invitee : OptionalArgument String
    , email : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the InviteBusinessAdminInput input object.
-}
type alias InviteBusinessAdminInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , invitee : OptionalArgument String
    , email : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a InviteBusinessAdminInput into a value that can be used as an argument.
-}
encodeInviteBusinessAdminInput : InviteBusinessAdminInput -> Value
encodeInviteBusinessAdminInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "invitee", Encode.string |> Encode.optional input.invitee ), ( "email", Encode.string |> Encode.optional input.email ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildInviteBusinessBillingManagerInput : InviteBusinessBillingManagerInputRequiredFields -> (InviteBusinessBillingManagerInputOptionalFields -> InviteBusinessBillingManagerInputOptionalFields) -> InviteBusinessBillingManagerInput
buildInviteBusinessBillingManagerInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { invitee = Absent, email = Absent, clientMutationId = Absent }
    in
    { businessId = required.businessId, invitee = optionals.invitee, email = optionals.email, clientMutationId = optionals.clientMutationId }


type alias InviteBusinessBillingManagerInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias InviteBusinessBillingManagerInputOptionalFields =
    { invitee : OptionalArgument String
    , email : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the InviteBusinessBillingManagerInput input object.
-}
type alias InviteBusinessBillingManagerInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , invitee : OptionalArgument String
    , email : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a InviteBusinessBillingManagerInput into a value that can be used as an argument.
-}
encodeInviteBusinessBillingManagerInput : InviteBusinessBillingManagerInput -> Value
encodeInviteBusinessBillingManagerInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "invitee", Encode.string |> Encode.optional input.invitee ), ( "email", Encode.string |> Encode.optional input.email ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildIssueOrder : IssueOrderRequiredFields -> IssueOrder
buildIssueOrder required =
    { field = required.field, direction = required.direction }


type alias IssueOrderRequiredFields =
    { field : ElmGithub.Enum.IssueOrderField.IssueOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the IssueOrder input object.
-}
type alias IssueOrder =
    { field : ElmGithub.Enum.IssueOrderField.IssueOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a IssueOrder into a value that can be used as an argument.
-}
encodeIssueOrder : IssueOrder -> Value
encodeIssueOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.IssueOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLanguageOrder : LanguageOrderRequiredFields -> LanguageOrder
buildLanguageOrder required =
    { field = required.field, direction = required.direction }


type alias LanguageOrderRequiredFields =
    { field : ElmGithub.Enum.LanguageOrderField.LanguageOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the LanguageOrder input object.
-}
type alias LanguageOrder =
    { field : ElmGithub.Enum.LanguageOrderField.LanguageOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a LanguageOrder into a value that can be used as an argument.
-}
encodeLanguageOrder : LanguageOrder -> Value
encodeLanguageOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.LanguageOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLockLockableInput : LockLockableInputRequiredFields -> (LockLockableInputOptionalFields -> LockLockableInputOptionalFields) -> LockLockableInput
buildLockLockableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { lockReason = Absent, clientMutationId = Absent }
    in
    { lockableId = required.lockableId, lockReason = optionals.lockReason, clientMutationId = optionals.clientMutationId }


type alias LockLockableInputRequiredFields =
    { lockableId : ElmGithub.ScalarCodecs.Id }


type alias LockLockableInputOptionalFields =
    { lockReason : OptionalArgument ElmGithub.Enum.LockReason.LockReason
    , clientMutationId : OptionalArgument String
    }


{-| Type for the LockLockableInput input object.
-}
type alias LockLockableInput =
    { lockableId : ElmGithub.ScalarCodecs.Id
    , lockReason : OptionalArgument ElmGithub.Enum.LockReason.LockReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a LockLockableInput into a value that can be used as an argument.
-}
encodeLockLockableInput : LockLockableInput -> Value
encodeLockLockableInput input =
    Encode.maybeObject
        [ ( "lockableId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.lockableId |> Just ), ( "lockReason", Encode.enum ElmGithub.Enum.LockReason.toString |> Encode.optional input.lockReason ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMilestoneOrder : MilestoneOrderRequiredFields -> MilestoneOrder
buildMilestoneOrder required =
    { field = required.field, direction = required.direction }


type alias MilestoneOrderRequiredFields =
    { field : ElmGithub.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the MilestoneOrder input object.
-}
type alias MilestoneOrder =
    { field : ElmGithub.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a MilestoneOrder into a value that can be used as an argument.
-}
encodeMilestoneOrder : MilestoneOrder -> Value
encodeMilestoneOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.MilestoneOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildMinimizeCommentInput : MinimizeCommentInputRequiredFields -> (MinimizeCommentInputOptionalFields -> MinimizeCommentInputOptionalFields) -> MinimizeCommentInput
buildMinimizeCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, classifier = required.classifier, clientMutationId = optionals.clientMutationId }


type alias MinimizeCommentInputRequiredFields =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , classifier : ElmGithub.Enum.ReportedContentClassifiers.ReportedContentClassifiers
    }


type alias MinimizeCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the MinimizeCommentInput input object.
-}
type alias MinimizeCommentInput =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , classifier : ElmGithub.Enum.ReportedContentClassifiers.ReportedContentClassifiers
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MinimizeCommentInput into a value that can be used as an argument.
-}
encodeMinimizeCommentInput : MinimizeCommentInput -> Value
encodeMinimizeCommentInput input =
    Encode.maybeObject
        [ ( "subjectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "classifier", Encode.enum ElmGithub.Enum.ReportedContentClassifiers.toString input.classifier |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMoveProjectCardInput : MoveProjectCardInputRequiredFields -> (MoveProjectCardInputOptionalFields -> MoveProjectCardInputOptionalFields) -> MoveProjectCardInput
buildMoveProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { afterCardId = Absent, clientMutationId = Absent }
    in
    { cardId = required.cardId, columnId = required.columnId, afterCardId = optionals.afterCardId, clientMutationId = optionals.clientMutationId }


type alias MoveProjectCardInputRequiredFields =
    { cardId : ElmGithub.ScalarCodecs.Id
    , columnId : ElmGithub.ScalarCodecs.Id
    }


type alias MoveProjectCardInputOptionalFields =
    { afterCardId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MoveProjectCardInput input object.
-}
type alias MoveProjectCardInput =
    { cardId : ElmGithub.ScalarCodecs.Id
    , columnId : ElmGithub.ScalarCodecs.Id
    , afterCardId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MoveProjectCardInput into a value that can be used as an argument.
-}
encodeMoveProjectCardInput : MoveProjectCardInput -> Value
encodeMoveProjectCardInput input =
    Encode.maybeObject
        [ ( "cardId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.cardId |> Just ), ( "columnId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "afterCardId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.optional input.afterCardId ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMoveProjectColumnInput : MoveProjectColumnInputRequiredFields -> (MoveProjectColumnInputOptionalFields -> MoveProjectColumnInputOptionalFields) -> MoveProjectColumnInput
buildMoveProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { afterColumnId = Absent, clientMutationId = Absent }
    in
    { columnId = required.columnId, afterColumnId = optionals.afterColumnId, clientMutationId = optionals.clientMutationId }


type alias MoveProjectColumnInputRequiredFields =
    { columnId : ElmGithub.ScalarCodecs.Id }


type alias MoveProjectColumnInputOptionalFields =
    { afterColumnId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MoveProjectColumnInput input object.
-}
type alias MoveProjectColumnInput =
    { columnId : ElmGithub.ScalarCodecs.Id
    , afterColumnId : OptionalArgument ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MoveProjectColumnInput into a value that can be used as an argument.
-}
encodeMoveProjectColumnInput : MoveProjectColumnInput -> Value
encodeMoveProjectColumnInput input =
    Encode.maybeObject
        [ ( "columnId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "afterColumnId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.optional input.afterColumnId ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildPinIssueInput : PinIssueInputRequiredFields -> (PinIssueInputOptionalFields -> PinIssueInputOptionalFields) -> PinIssueInput
buildPinIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, clientMutationId = optionals.clientMutationId }


type alias PinIssueInputRequiredFields =
    { issueId : ElmGithub.ScalarCodecs.Id }


type alias PinIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the PinIssueInput input object.
-}
type alias PinIssueInput =
    { issueId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a PinIssueInput into a value that can be used as an argument.
-}
encodePinIssueInput : PinIssueInput -> Value
encodePinIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildProjectOrder : ProjectOrderRequiredFields -> ProjectOrder
buildProjectOrder required =
    { field = required.field, direction = required.direction }


type alias ProjectOrderRequiredFields =
    { field : ElmGithub.Enum.ProjectOrderField.ProjectOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectOrder input object.
-}
type alias ProjectOrder =
    { field : ElmGithub.Enum.ProjectOrderField.ProjectOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectOrder into a value that can be used as an argument.
-}
encodeProjectOrder : ProjectOrder -> Value
encodeProjectOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.ProjectOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildPullRequestOrder : PullRequestOrderRequiredFields -> PullRequestOrder
buildPullRequestOrder required =
    { field = required.field, direction = required.direction }


type alias PullRequestOrderRequiredFields =
    { field : ElmGithub.Enum.PullRequestOrderField.PullRequestOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the PullRequestOrder input object.
-}
type alias PullRequestOrder =
    { field : ElmGithub.Enum.PullRequestOrderField.PullRequestOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a PullRequestOrder into a value that can be used as an argument.
-}
encodePullRequestOrder : PullRequestOrder -> Value
encodePullRequestOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.PullRequestOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildReactionOrder : ReactionOrderRequiredFields -> ReactionOrder
buildReactionOrder required =
    { field = required.field, direction = required.direction }


type alias ReactionOrderRequiredFields =
    { field : ElmGithub.Enum.ReactionOrderField.ReactionOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReactionOrder input object.
-}
type alias ReactionOrder =
    { field : ElmGithub.Enum.ReactionOrderField.ReactionOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReactionOrder into a value that can be used as an argument.
-}
encodeReactionOrder : ReactionOrder -> Value
encodeReactionOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.ReactionOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRefOrder : RefOrderRequiredFields -> RefOrder
buildRefOrder required =
    { field = required.field, direction = required.direction }


type alias RefOrderRequiredFields =
    { field : ElmGithub.Enum.RefOrderField.RefOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RefOrder input object.
-}
type alias RefOrder =
    { field : ElmGithub.Enum.RefOrderField.RefOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RefOrder into a value that can be used as an argument.
-}
encodeRefOrder : RefOrder -> Value
encodeRefOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.RefOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRegenerateBusinessIdentityProviderRecoveryCodesInput : RegenerateBusinessIdentityProviderRecoveryCodesInputRequiredFields -> (RegenerateBusinessIdentityProviderRecoveryCodesInputOptionalFields -> RegenerateBusinessIdentityProviderRecoveryCodesInputOptionalFields) -> RegenerateBusinessIdentityProviderRecoveryCodesInput
buildRegenerateBusinessIdentityProviderRecoveryCodesInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias RegenerateBusinessIdentityProviderRecoveryCodesInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias RegenerateBusinessIdentityProviderRecoveryCodesInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RegenerateBusinessIdentityProviderRecoveryCodesInput input object.
-}
type alias RegenerateBusinessIdentityProviderRecoveryCodesInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RegenerateBusinessIdentityProviderRecoveryCodesInput into a value that can be used as an argument.
-}
encodeRegenerateBusinessIdentityProviderRecoveryCodesInput : RegenerateBusinessIdentityProviderRecoveryCodesInput -> Value
encodeRegenerateBusinessIdentityProviderRecoveryCodesInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildReleaseOrder : ReleaseOrderRequiredFields -> ReleaseOrder
buildReleaseOrder required =
    { field = required.field, direction = required.direction }


type alias ReleaseOrderRequiredFields =
    { field : ElmGithub.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReleaseOrder input object.
-}
type alias ReleaseOrder =
    { field : ElmGithub.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReleaseOrder into a value that can be used as an argument.
-}
encodeReleaseOrder : ReleaseOrder -> Value
encodeReleaseOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.ReleaseOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRemoveBusinessAdminInput : RemoveBusinessAdminInputRequiredFields -> (RemoveBusinessAdminInputOptionalFields -> RemoveBusinessAdminInputOptionalFields) -> RemoveBusinessAdminInput
buildRemoveBusinessAdminInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, login = required.login, clientMutationId = optionals.clientMutationId }


type alias RemoveBusinessAdminInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id
    , login : String
    }


type alias RemoveBusinessAdminInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveBusinessAdminInput input object.
-}
type alias RemoveBusinessAdminInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveBusinessAdminInput into a value that can be used as an argument.
-}
encodeRemoveBusinessAdminInput : RemoveBusinessAdminInput -> Value
encodeRemoveBusinessAdminInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "login", Encode.string input.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveBusinessBillingManagerInput : RemoveBusinessBillingManagerInputRequiredFields -> (RemoveBusinessBillingManagerInputOptionalFields -> RemoveBusinessBillingManagerInputOptionalFields) -> RemoveBusinessBillingManagerInput
buildRemoveBusinessBillingManagerInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, login = required.login, clientMutationId = optionals.clientMutationId }


type alias RemoveBusinessBillingManagerInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id
    , login : String
    }


type alias RemoveBusinessBillingManagerInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveBusinessBillingManagerInput input object.
-}
type alias RemoveBusinessBillingManagerInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveBusinessBillingManagerInput into a value that can be used as an argument.
-}
encodeRemoveBusinessBillingManagerInput : RemoveBusinessBillingManagerInput -> Value
encodeRemoveBusinessBillingManagerInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "login", Encode.string input.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveBusinessIdentityProviderInput : RemoveBusinessIdentityProviderInputRequiredFields -> (RemoveBusinessIdentityProviderInputOptionalFields -> RemoveBusinessIdentityProviderInputOptionalFields) -> RemoveBusinessIdentityProviderInput
buildRemoveBusinessIdentityProviderInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias RemoveBusinessIdentityProviderInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias RemoveBusinessIdentityProviderInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveBusinessIdentityProviderInput input object.
-}
type alias RemoveBusinessIdentityProviderInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveBusinessIdentityProviderInput into a value that can be used as an argument.
-}
encodeRemoveBusinessIdentityProviderInput : RemoveBusinessIdentityProviderInput -> Value
encodeRemoveBusinessIdentityProviderInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveOutsideCollaboratorInput : RemoveOutsideCollaboratorInputRequiredFields -> (RemoveOutsideCollaboratorInputOptionalFields -> RemoveOutsideCollaboratorInputOptionalFields) -> RemoveOutsideCollaboratorInput
buildRemoveOutsideCollaboratorInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { userId = required.userId, organizationId = required.organizationId, clientMutationId = optionals.clientMutationId }


type alias RemoveOutsideCollaboratorInputRequiredFields =
    { userId : ElmGithub.ScalarCodecs.Id
    , organizationId : ElmGithub.ScalarCodecs.Id
    }


type alias RemoveOutsideCollaboratorInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveOutsideCollaboratorInput input object.
-}
type alias RemoveOutsideCollaboratorInput =
    { userId : ElmGithub.ScalarCodecs.Id
    , organizationId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveOutsideCollaboratorInput into a value that can be used as an argument.
-}
encodeRemoveOutsideCollaboratorInput : RemoveOutsideCollaboratorInput -> Value
encodeRemoveOutsideCollaboratorInput input =
    Encode.maybeObject
        [ ( "userId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.userId |> Just ), ( "organizationId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveReactionInput : RemoveReactionInputRequiredFields -> (RemoveReactionInputOptionalFields -> RemoveReactionInputOptionalFields) -> RemoveReactionInput
buildRemoveReactionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, content = required.content, clientMutationId = optionals.clientMutationId }


type alias RemoveReactionInputRequiredFields =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , content : ElmGithub.Enum.ReactionContent.ReactionContent
    }


type alias RemoveReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveReactionInput input object.
-}
type alias RemoveReactionInput =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , content : ElmGithub.Enum.ReactionContent.ReactionContent
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveReactionInput into a value that can be used as an argument.
-}
encodeRemoveReactionInput : RemoveReactionInput -> Value
encodeRemoveReactionInput input =
    Encode.maybeObject
        [ ( "subjectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "content", Encode.enum ElmGithub.Enum.ReactionContent.toString input.content |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveStarInput : RemoveStarInputRequiredFields -> (RemoveStarInputOptionalFields -> RemoveStarInputOptionalFields) -> RemoveStarInput
buildRemoveStarInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { starrableId = required.starrableId, clientMutationId = optionals.clientMutationId }


type alias RemoveStarInputRequiredFields =
    { starrableId : ElmGithub.ScalarCodecs.Id }


type alias RemoveStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveStarInput input object.
-}
type alias RemoveStarInput =
    { starrableId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveStarInput into a value that can be used as an argument.
-}
encodeRemoveStarInput : RemoveStarInput -> Value
encodeRemoveStarInput input =
    Encode.maybeObject
        [ ( "starrableId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.starrableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRepositoryOrder : RepositoryOrderRequiredFields -> RepositoryOrder
buildRepositoryOrder required =
    { field = required.field, direction = required.direction }


type alias RepositoryOrderRequiredFields =
    { field : ElmGithub.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RepositoryOrder input object.
-}
type alias RepositoryOrder =
    { field : ElmGithub.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RepositoryOrder into a value that can be used as an argument.
-}
encodeRepositoryOrder : RepositoryOrder -> Value
encodeRepositoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.RepositoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRequestReviewsInput : RequestReviewsInputRequiredFields -> (RequestReviewsInputOptionalFields -> RequestReviewsInputOptionalFields) -> RequestReviewsInput
buildRequestReviewsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { userIds = Absent, teamIds = Absent, union = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, userIds = optionals.userIds, teamIds = optionals.teamIds, union = optionals.union, clientMutationId = optionals.clientMutationId }


type alias RequestReviewsInputRequiredFields =
    { pullRequestId : ElmGithub.ScalarCodecs.Id }


type alias RequestReviewsInputOptionalFields =
    { userIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the RequestReviewsInput input object.
-}
type alias RequestReviewsInput =
    { pullRequestId : ElmGithub.ScalarCodecs.Id
    , userIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RequestReviewsInput into a value that can be used as an argument.
-}
encodeRequestReviewsInput : RequestReviewsInput -> Value
encodeRequestReviewsInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "userIds", ((ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.userIds ), ( "teamIds", ((ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.teamIds ), ( "union", Encode.bool |> Encode.optional input.union ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildResolveReviewThreadInput : ResolveReviewThreadInputRequiredFields -> (ResolveReviewThreadInputOptionalFields -> ResolveReviewThreadInputOptionalFields) -> ResolveReviewThreadInput
buildResolveReviewThreadInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { threadId = required.threadId, clientMutationId = optionals.clientMutationId }


type alias ResolveReviewThreadInputRequiredFields =
    { threadId : ElmGithub.ScalarCodecs.Id }


type alias ResolveReviewThreadInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ResolveReviewThreadInput input object.
-}
type alias ResolveReviewThreadInput =
    { threadId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ResolveReviewThreadInput into a value that can be used as an argument.
-}
encodeResolveReviewThreadInput : ResolveReviewThreadInput -> Value
encodeResolveReviewThreadInput input =
    Encode.maybeObject
        [ ( "threadId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.threadId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildSecurityAdvisoryIdentifierFilter : SecurityAdvisoryIdentifierFilterRequiredFields -> SecurityAdvisoryIdentifierFilter
buildSecurityAdvisoryIdentifierFilter required =
    { type_ = required.type_, value = required.value }


type alias SecurityAdvisoryIdentifierFilterRequiredFields =
    { type_ : ElmGithub.Enum.SecurityAdvisoryIdentifierType.SecurityAdvisoryIdentifierType
    , value : String
    }


{-| Type for the SecurityAdvisoryIdentifierFilter input object.
-}
type alias SecurityAdvisoryIdentifierFilter =
    { type_ : ElmGithub.Enum.SecurityAdvisoryIdentifierType.SecurityAdvisoryIdentifierType
    , value : String
    }


{-| Encode a SecurityAdvisoryIdentifierFilter into a value that can be used as an argument.
-}
encodeSecurityAdvisoryIdentifierFilter : SecurityAdvisoryIdentifierFilter -> Value
encodeSecurityAdvisoryIdentifierFilter input =
    Encode.maybeObject
        [ ( "type", Encode.enum ElmGithub.Enum.SecurityAdvisoryIdentifierType.toString input.type_ |> Just ), ( "value", Encode.string input.value |> Just ) ]


buildSecurityAdvisoryOrder : SecurityAdvisoryOrderRequiredFields -> SecurityAdvisoryOrder
buildSecurityAdvisoryOrder required =
    { field = required.field, direction = required.direction }


type alias SecurityAdvisoryOrderRequiredFields =
    { field : ElmGithub.Enum.SecurityAdvisoryOrderField.SecurityAdvisoryOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SecurityAdvisoryOrder input object.
-}
type alias SecurityAdvisoryOrder =
    { field : ElmGithub.Enum.SecurityAdvisoryOrderField.SecurityAdvisoryOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SecurityAdvisoryOrder into a value that can be used as an argument.
-}
encodeSecurityAdvisoryOrder : SecurityAdvisoryOrder -> Value
encodeSecurityAdvisoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.SecurityAdvisoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSecurityVulnerabilityOrder : SecurityVulnerabilityOrderRequiredFields -> SecurityVulnerabilityOrder
buildSecurityVulnerabilityOrder required =
    { field = required.field, direction = required.direction }


type alias SecurityVulnerabilityOrderRequiredFields =
    { field : ElmGithub.Enum.SecurityVulnerabilityOrderField.SecurityVulnerabilityOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SecurityVulnerabilityOrder input object.
-}
type alias SecurityVulnerabilityOrder =
    { field : ElmGithub.Enum.SecurityVulnerabilityOrderField.SecurityVulnerabilityOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SecurityVulnerabilityOrder into a value that can be used as an argument.
-}
encodeSecurityVulnerabilityOrder : SecurityVulnerabilityOrder -> Value
encodeSecurityVulnerabilityOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.SecurityVulnerabilityOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSetBusinessIdentityProviderInput : SetBusinessIdentityProviderInputRequiredFields -> (SetBusinessIdentityProviderInputOptionalFields -> SetBusinessIdentityProviderInputOptionalFields) -> SetBusinessIdentityProviderInput
buildSetBusinessIdentityProviderInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { issuer = Absent, clientMutationId = Absent }
    in
    { businessId = required.businessId, ssoUrl = required.ssoUrl, issuer = optionals.issuer, idpCertificate = required.idpCertificate, clientMutationId = optionals.clientMutationId }


type alias SetBusinessIdentityProviderInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id
    , ssoUrl : ElmGithub.ScalarCodecs.Uri
    , idpCertificate : String
    }


type alias SetBusinessIdentityProviderInputOptionalFields =
    { issuer : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SetBusinessIdentityProviderInput input object.
-}
type alias SetBusinessIdentityProviderInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , ssoUrl : ElmGithub.ScalarCodecs.Uri
    , issuer : OptionalArgument String
    , idpCertificate : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SetBusinessIdentityProviderInput into a value that can be used as an argument.
-}
encodeSetBusinessIdentityProviderInput : SetBusinessIdentityProviderInput -> Value
encodeSetBusinessIdentityProviderInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "ssoUrl", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecUri) input.ssoUrl |> Just ), ( "issuer", Encode.string |> Encode.optional input.issuer ), ( "idpCertificate", Encode.string input.idpCertificate |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildStarOrder : StarOrderRequiredFields -> StarOrder
buildStarOrder required =
    { field = required.field, direction = required.direction }


type alias StarOrderRequiredFields =
    { field : ElmGithub.Enum.StarOrderField.StarOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the StarOrder input object.
-}
type alias StarOrder =
    { field : ElmGithub.Enum.StarOrderField.StarOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a StarOrder into a value that can be used as an argument.
-}
encodeStarOrder : StarOrder -> Value
encodeStarOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.StarOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSubmitPullRequestReviewInput : SubmitPullRequestReviewInputRequiredFields -> (SubmitPullRequestReviewInputOptionalFields -> SubmitPullRequestReviewInputOptionalFields) -> SubmitPullRequestReviewInput
buildSubmitPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { body = Absent, clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, event = required.event, body = optionals.body, clientMutationId = optionals.clientMutationId }


type alias SubmitPullRequestReviewInputRequiredFields =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , event : ElmGithub.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    }


type alias SubmitPullRequestReviewInputOptionalFields =
    { body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SubmitPullRequestReviewInput input object.
-}
type alias SubmitPullRequestReviewInput =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , event : ElmGithub.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SubmitPullRequestReviewInput into a value that can be used as an argument.
-}
encodeSubmitPullRequestReviewInput : SubmitPullRequestReviewInput -> Value
encodeSubmitPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "event", Encode.enum ElmGithub.Enum.PullRequestReviewEvent.toString input.event |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildTeamMemberOrder : TeamMemberOrderRequiredFields -> TeamMemberOrder
buildTeamMemberOrder required =
    { field = required.field, direction = required.direction }


type alias TeamMemberOrderRequiredFields =
    { field : ElmGithub.Enum.TeamMemberOrderField.TeamMemberOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamMemberOrder input object.
-}
type alias TeamMemberOrder =
    { field : ElmGithub.Enum.TeamMemberOrderField.TeamMemberOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamMemberOrder into a value that can be used as an argument.
-}
encodeTeamMemberOrder : TeamMemberOrder -> Value
encodeTeamMemberOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.TeamMemberOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamOrder : TeamOrderRequiredFields -> TeamOrder
buildTeamOrder required =
    { field = required.field, direction = required.direction }


type alias TeamOrderRequiredFields =
    { field : ElmGithub.Enum.TeamOrderField.TeamOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamOrder input object.
-}
type alias TeamOrder =
    { field : ElmGithub.Enum.TeamOrderField.TeamOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamOrder into a value that can be used as an argument.
-}
encodeTeamOrder : TeamOrder -> Value
encodeTeamOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.TeamOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamRepositoryOrder : TeamRepositoryOrderRequiredFields -> TeamRepositoryOrder
buildTeamRepositoryOrder required =
    { field = required.field, direction = required.direction }


type alias TeamRepositoryOrderRequiredFields =
    { field : ElmGithub.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamRepositoryOrder input object.
-}
type alias TeamRepositoryOrder =
    { field : ElmGithub.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamRepositoryOrder into a value that can be used as an argument.
-}
encodeTeamRepositoryOrder : TeamRepositoryOrder -> Value
encodeTeamRepositoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.TeamRepositoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]


buildUnlockLockableInput : UnlockLockableInputRequiredFields -> (UnlockLockableInputOptionalFields -> UnlockLockableInputOptionalFields) -> UnlockLockableInput
buildUnlockLockableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { lockableId = required.lockableId, clientMutationId = optionals.clientMutationId }


type alias UnlockLockableInputRequiredFields =
    { lockableId : ElmGithub.ScalarCodecs.Id }


type alias UnlockLockableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnlockLockableInput input object.
-}
type alias UnlockLockableInput =
    { lockableId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnlockLockableInput into a value that can be used as an argument.
-}
encodeUnlockLockableInput : UnlockLockableInput -> Value
encodeUnlockLockableInput input =
    Encode.maybeObject
        [ ( "lockableId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.lockableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnminimizeCommentInput : UnminimizeCommentInputRequiredFields -> (UnminimizeCommentInputOptionalFields -> UnminimizeCommentInputOptionalFields) -> UnminimizeCommentInput
buildUnminimizeCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, clientMutationId = optionals.clientMutationId }


type alias UnminimizeCommentInputRequiredFields =
    { subjectId : ElmGithub.ScalarCodecs.Id }


type alias UnminimizeCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnminimizeCommentInput input object.
-}
type alias UnminimizeCommentInput =
    { subjectId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnminimizeCommentInput into a value that can be used as an argument.
-}
encodeUnminimizeCommentInput : UnminimizeCommentInput -> Value
encodeUnminimizeCommentInput input =
    Encode.maybeObject
        [ ( "subjectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnpinIssueInput : UnpinIssueInputRequiredFields -> (UnpinIssueInputOptionalFields -> UnpinIssueInputOptionalFields) -> UnpinIssueInput
buildUnpinIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, clientMutationId = optionals.clientMutationId }


type alias UnpinIssueInputRequiredFields =
    { issueId : ElmGithub.ScalarCodecs.Id }


type alias UnpinIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnpinIssueInput input object.
-}
type alias UnpinIssueInput =
    { issueId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnpinIssueInput into a value that can be used as an argument.
-}
encodeUnpinIssueInput : UnpinIssueInput -> Value
encodeUnpinIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnresolveReviewThreadInput : UnresolveReviewThreadInputRequiredFields -> (UnresolveReviewThreadInputOptionalFields -> UnresolveReviewThreadInputOptionalFields) -> UnresolveReviewThreadInput
buildUnresolveReviewThreadInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { threadId = required.threadId, clientMutationId = optionals.clientMutationId }


type alias UnresolveReviewThreadInputRequiredFields =
    { threadId : ElmGithub.ScalarCodecs.Id }


type alias UnresolveReviewThreadInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnresolveReviewThreadInput input object.
-}
type alias UnresolveReviewThreadInput =
    { threadId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnresolveReviewThreadInput into a value that can be used as an argument.
-}
encodeUnresolveReviewThreadInput : UnresolveReviewThreadInput -> Value
encodeUnresolveReviewThreadInput input =
    Encode.maybeObject
        [ ( "threadId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.threadId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBranchProtectionRuleInput : UpdateBranchProtectionRuleInputRequiredFields -> (UpdateBranchProtectionRuleInputOptionalFields -> UpdateBranchProtectionRuleInputOptionalFields) -> UpdateBranchProtectionRuleInput
buildUpdateBranchProtectionRuleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { pattern = Absent, requiresApprovingReviews = Absent, requiredApprovingReviewCount = Absent, requiresCommitSignatures = Absent, isAdminEnforced = Absent, requiresStatusChecks = Absent, requiresStrictStatusChecks = Absent, requiresCodeOwnerReviews = Absent, dismissesStaleReviews = Absent, restrictsReviewDismissals = Absent, reviewDismissalActorIds = Absent, restrictsPushes = Absent, pushActorIds = Absent, requiredStatusCheckContexts = Absent, clientMutationId = Absent }
    in
    { branchProtectionRuleId = required.branchProtectionRuleId, pattern = optionals.pattern, requiresApprovingReviews = optionals.requiresApprovingReviews, requiredApprovingReviewCount = optionals.requiredApprovingReviewCount, requiresCommitSignatures = optionals.requiresCommitSignatures, isAdminEnforced = optionals.isAdminEnforced, requiresStatusChecks = optionals.requiresStatusChecks, requiresStrictStatusChecks = optionals.requiresStrictStatusChecks, requiresCodeOwnerReviews = optionals.requiresCodeOwnerReviews, dismissesStaleReviews = optionals.dismissesStaleReviews, restrictsReviewDismissals = optionals.restrictsReviewDismissals, reviewDismissalActorIds = optionals.reviewDismissalActorIds, restrictsPushes = optionals.restrictsPushes, pushActorIds = optionals.pushActorIds, requiredStatusCheckContexts = optionals.requiredStatusCheckContexts, clientMutationId = optionals.clientMutationId }


type alias UpdateBranchProtectionRuleInputRequiredFields =
    { branchProtectionRuleId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBranchProtectionRuleInputOptionalFields =
    { pattern : OptionalArgument String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateBranchProtectionRuleInput input object.
-}
type alias UpdateBranchProtectionRuleInput =
    { branchProtectionRuleId : ElmGithub.ScalarCodecs.Id
    , pattern : OptionalArgument String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List ElmGithub.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeUpdateBranchProtectionRuleInput : UpdateBranchProtectionRuleInput -> Value
encodeUpdateBranchProtectionRuleInput input =
    Encode.maybeObject
        [ ( "branchProtectionRuleId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.branchProtectionRuleId |> Just ), ( "pattern", Encode.string |> Encode.optional input.pattern ), ( "requiresApprovingReviews", Encode.bool |> Encode.optional input.requiresApprovingReviews ), ( "requiredApprovingReviewCount", Encode.int |> Encode.optional input.requiredApprovingReviewCount ), ( "requiresCommitSignatures", Encode.bool |> Encode.optional input.requiresCommitSignatures ), ( "isAdminEnforced", Encode.bool |> Encode.optional input.isAdminEnforced ), ( "requiresStatusChecks", Encode.bool |> Encode.optional input.requiresStatusChecks ), ( "requiresStrictStatusChecks", Encode.bool |> Encode.optional input.requiresStrictStatusChecks ), ( "requiresCodeOwnerReviews", Encode.bool |> Encode.optional input.requiresCodeOwnerReviews ), ( "dismissesStaleReviews", Encode.bool |> Encode.optional input.dismissesStaleReviews ), ( "restrictsReviewDismissals", Encode.bool |> Encode.optional input.restrictsReviewDismissals ), ( "reviewDismissalActorIds", ((ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.reviewDismissalActorIds ), ( "restrictsPushes", Encode.bool |> Encode.optional input.restrictsPushes ), ( "pushActorIds", ((ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.pushActorIds ), ( "requiredStatusCheckContexts", (Encode.string |> Encode.list) |> Encode.optional input.requiredStatusCheckContexts ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessAllowPrivateRepositoryForkingSettingInput : UpdateBusinessAllowPrivateRepositoryForkingSettingInputRequiredFields -> (UpdateBusinessAllowPrivateRepositoryForkingSettingInputOptionalFields -> UpdateBusinessAllowPrivateRepositoryForkingSettingInputOptionalFields) -> UpdateBusinessAllowPrivateRepositoryForkingSettingInput
buildUpdateBusinessAllowPrivateRepositoryForkingSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessAllowPrivateRepositoryForkingSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessAllowPrivateRepositoryForkingSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessAllowPrivateRepositoryForkingSettingInput input object.
-}
type alias UpdateBusinessAllowPrivateRepositoryForkingSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessAllowPrivateRepositoryForkingSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessAllowPrivateRepositoryForkingSettingInput : UpdateBusinessAllowPrivateRepositoryForkingSettingInput -> Value
encodeUpdateBusinessAllowPrivateRepositoryForkingSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessDefaultRepositoryPermissionSettingInput : UpdateBusinessDefaultRepositoryPermissionSettingInputRequiredFields -> (UpdateBusinessDefaultRepositoryPermissionSettingInputOptionalFields -> UpdateBusinessDefaultRepositoryPermissionSettingInputOptionalFields) -> UpdateBusinessDefaultRepositoryPermissionSettingInput
buildUpdateBusinessDefaultRepositoryPermissionSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessDefaultRepositoryPermissionSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessDefaultRepositoryPermissionSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessDefaultRepositoryPermissionSettingInput input object.
-}
type alias UpdateBusinessDefaultRepositoryPermissionSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessDefaultRepositoryPermissionSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessDefaultRepositoryPermissionSettingInput : UpdateBusinessDefaultRepositoryPermissionSettingInput -> Value
encodeUpdateBusinessDefaultRepositoryPermissionSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput : UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputRequiredFields -> (UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputOptionalFields -> UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputOptionalFields) -> UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput
buildUpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput input object.
-}
type alias UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput : UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput -> Value
encodeUpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessMembersCanCreateRepositoriesSettingInput : UpdateBusinessMembersCanCreateRepositoriesSettingInputRequiredFields -> (UpdateBusinessMembersCanCreateRepositoriesSettingInputOptionalFields -> UpdateBusinessMembersCanCreateRepositoriesSettingInputOptionalFields) -> UpdateBusinessMembersCanCreateRepositoriesSettingInput
buildUpdateBusinessMembersCanCreateRepositoriesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessMembersCanCreateRepositoriesSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessMembersCanCreateRepositoriesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessMembersCanCreateRepositoriesSettingInput input object.
-}
type alias UpdateBusinessMembersCanCreateRepositoriesSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessMembersCanCreateRepositoriesSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessMembersCanCreateRepositoriesSettingInput : UpdateBusinessMembersCanCreateRepositoriesSettingInput -> Value
encodeUpdateBusinessMembersCanCreateRepositoriesSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessMembersCanDeleteIssuesSettingInput : UpdateBusinessMembersCanDeleteIssuesSettingInputRequiredFields -> (UpdateBusinessMembersCanDeleteIssuesSettingInputOptionalFields -> UpdateBusinessMembersCanDeleteIssuesSettingInputOptionalFields) -> UpdateBusinessMembersCanDeleteIssuesSettingInput
buildUpdateBusinessMembersCanDeleteIssuesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessMembersCanDeleteIssuesSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessMembersCanDeleteIssuesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessMembersCanDeleteIssuesSettingInput input object.
-}
type alias UpdateBusinessMembersCanDeleteIssuesSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessMembersCanDeleteIssuesSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessMembersCanDeleteIssuesSettingInput : UpdateBusinessMembersCanDeleteIssuesSettingInput -> Value
encodeUpdateBusinessMembersCanDeleteIssuesSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessMembersCanDeleteRepositoriesSettingInput : UpdateBusinessMembersCanDeleteRepositoriesSettingInputRequiredFields -> (UpdateBusinessMembersCanDeleteRepositoriesSettingInputOptionalFields -> UpdateBusinessMembersCanDeleteRepositoriesSettingInputOptionalFields) -> UpdateBusinessMembersCanDeleteRepositoriesSettingInput
buildUpdateBusinessMembersCanDeleteRepositoriesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessMembersCanDeleteRepositoriesSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessMembersCanDeleteRepositoriesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessMembersCanDeleteRepositoriesSettingInput input object.
-}
type alias UpdateBusinessMembersCanDeleteRepositoriesSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessMembersCanDeleteRepositoriesSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessMembersCanDeleteRepositoriesSettingInput : UpdateBusinessMembersCanDeleteRepositoriesSettingInput -> Value
encodeUpdateBusinessMembersCanDeleteRepositoriesSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessMembersCanInviteCollaboratorsSettingInput : UpdateBusinessMembersCanInviteCollaboratorsSettingInputRequiredFields -> (UpdateBusinessMembersCanInviteCollaboratorsSettingInputOptionalFields -> UpdateBusinessMembersCanInviteCollaboratorsSettingInputOptionalFields) -> UpdateBusinessMembersCanInviteCollaboratorsSettingInput
buildUpdateBusinessMembersCanInviteCollaboratorsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessMembersCanInviteCollaboratorsSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessMembersCanInviteCollaboratorsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessMembersCanInviteCollaboratorsSettingInput input object.
-}
type alias UpdateBusinessMembersCanInviteCollaboratorsSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessMembersCanInviteCollaboratorsSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessMembersCanInviteCollaboratorsSettingInput : UpdateBusinessMembersCanInviteCollaboratorsSettingInput -> Value
encodeUpdateBusinessMembersCanInviteCollaboratorsSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessMembersCanUpdateProtectedBranchesSettingInput : UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputRequiredFields -> (UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputOptionalFields -> UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputOptionalFields) -> UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput
buildUpdateBusinessMembersCanUpdateProtectedBranchesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessMembersCanUpdateProtectedBranchesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput input object.
-}
type alias UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessMembersCanUpdateProtectedBranchesSettingInput : UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput -> Value
encodeUpdateBusinessMembersCanUpdateProtectedBranchesSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessOrganizationProjectsSettingInput : UpdateBusinessOrganizationProjectsSettingInputRequiredFields -> (UpdateBusinessOrganizationProjectsSettingInputOptionalFields -> UpdateBusinessOrganizationProjectsSettingInputOptionalFields) -> UpdateBusinessOrganizationProjectsSettingInput
buildUpdateBusinessOrganizationProjectsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessOrganizationProjectsSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessOrganizationProjectsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessOrganizationProjectsSettingInput input object.
-}
type alias UpdateBusinessOrganizationProjectsSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessOrganizationProjectsSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessOrganizationProjectsSettingInput : UpdateBusinessOrganizationProjectsSettingInput -> Value
encodeUpdateBusinessOrganizationProjectsSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessProfileInput : UpdateBusinessProfileInputRequiredFields -> (UpdateBusinessProfileInputOptionalFields -> UpdateBusinessProfileInputOptionalFields) -> UpdateBusinessProfileInput
buildUpdateBusinessProfileInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, description = Absent, websiteUrl = Absent, location = Absent, clientMutationId = Absent }
    in
    { businessId = required.businessId, name = optionals.name, description = optionals.description, websiteUrl = optionals.websiteUrl, location = optionals.location, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessProfileInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessProfileInputOptionalFields =
    { name : OptionalArgument String
    , description : OptionalArgument String
    , websiteUrl : OptionalArgument String
    , location : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateBusinessProfileInput input object.
-}
type alias UpdateBusinessProfileInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , name : OptionalArgument String
    , description : OptionalArgument String
    , websiteUrl : OptionalArgument String
    , location : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessProfileInput into a value that can be used as an argument.
-}
encodeUpdateBusinessProfileInput : UpdateBusinessProfileInput -> Value
encodeUpdateBusinessProfileInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "websiteUrl", Encode.string |> Encode.optional input.websiteUrl ), ( "location", Encode.string |> Encode.optional input.location ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessRepositoryProjectsSettingInput : UpdateBusinessRepositoryProjectsSettingInputRequiredFields -> (UpdateBusinessRepositoryProjectsSettingInputOptionalFields -> UpdateBusinessRepositoryProjectsSettingInputOptionalFields) -> UpdateBusinessRepositoryProjectsSettingInput
buildUpdateBusinessRepositoryProjectsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessRepositoryProjectsSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessRepositoryProjectsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessRepositoryProjectsSettingInput input object.
-}
type alias UpdateBusinessRepositoryProjectsSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessRepositoryProjectsSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessRepositoryProjectsSettingInput : UpdateBusinessRepositoryProjectsSettingInput -> Value
encodeUpdateBusinessRepositoryProjectsSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessTeamDiscussionsSettingInput : UpdateBusinessTeamDiscussionsSettingInputRequiredFields -> (UpdateBusinessTeamDiscussionsSettingInputOptionalFields -> UpdateBusinessTeamDiscussionsSettingInputOptionalFields) -> UpdateBusinessTeamDiscussionsSettingInput
buildUpdateBusinessTeamDiscussionsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessTeamDiscussionsSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessTeamDiscussionsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessTeamDiscussionsSettingInput input object.
-}
type alias UpdateBusinessTeamDiscussionsSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessTeamDiscussionsSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessTeamDiscussionsSettingInput : UpdateBusinessTeamDiscussionsSettingInput -> Value
encodeUpdateBusinessTeamDiscussionsSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBusinessTwoFactorAuthenticationRequiredSettingInput : UpdateBusinessTwoFactorAuthenticationRequiredSettingInputRequiredFields -> (UpdateBusinessTwoFactorAuthenticationRequiredSettingInputOptionalFields -> UpdateBusinessTwoFactorAuthenticationRequiredSettingInputOptionalFields) -> UpdateBusinessTwoFactorAuthenticationRequiredSettingInput
buildUpdateBusinessTwoFactorAuthenticationRequiredSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { businessId = required.businessId, clientMutationId = optionals.clientMutationId }


type alias UpdateBusinessTwoFactorAuthenticationRequiredSettingInputRequiredFields =
    { businessId : ElmGithub.ScalarCodecs.Id }


type alias UpdateBusinessTwoFactorAuthenticationRequiredSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateBusinessTwoFactorAuthenticationRequiredSettingInput input object.
-}
type alias UpdateBusinessTwoFactorAuthenticationRequiredSettingInput =
    { businessId : ElmGithub.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBusinessTwoFactorAuthenticationRequiredSettingInput into a value that can be used as an argument.
-}
encodeUpdateBusinessTwoFactorAuthenticationRequiredSettingInput : UpdateBusinessTwoFactorAuthenticationRequiredSettingInput -> Value
encodeUpdateBusinessTwoFactorAuthenticationRequiredSettingInput input =
    Encode.maybeObject
        [ ( "businessId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.businessId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateProjectCardInput : UpdateProjectCardInputRequiredFields -> (UpdateProjectCardInputOptionalFields -> UpdateProjectCardInputOptionalFields) -> UpdateProjectCardInput
buildUpdateProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { isArchived = Absent, note = Absent, clientMutationId = Absent }
    in
    { projectCardId = required.projectCardId, isArchived = optionals.isArchived, note = optionals.note, clientMutationId = optionals.clientMutationId }


type alias UpdateProjectCardInputRequiredFields =
    { projectCardId : ElmGithub.ScalarCodecs.Id }


type alias UpdateProjectCardInputOptionalFields =
    { isArchived : OptionalArgument Bool
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectCardInput input object.
-}
type alias UpdateProjectCardInput =
    { projectCardId : ElmGithub.ScalarCodecs.Id
    , isArchived : OptionalArgument Bool
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectCardInput into a value that can be used as an argument.
-}
encodeUpdateProjectCardInput : UpdateProjectCardInput -> Value
encodeUpdateProjectCardInput input =
    Encode.maybeObject
        [ ( "projectCardId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.projectCardId |> Just ), ( "isArchived", Encode.bool |> Encode.optional input.isArchived ), ( "note", Encode.string |> Encode.optional input.note ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateProjectColumnInput : UpdateProjectColumnInputRequiredFields -> (UpdateProjectColumnInputOptionalFields -> UpdateProjectColumnInputOptionalFields) -> UpdateProjectColumnInput
buildUpdateProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectColumnId = required.projectColumnId, name = required.name, clientMutationId = optionals.clientMutationId }


type alias UpdateProjectColumnInputRequiredFields =
    { projectColumnId : ElmGithub.ScalarCodecs.Id
    , name : String
    }


type alias UpdateProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateProjectColumnInput input object.
-}
type alias UpdateProjectColumnInput =
    { projectColumnId : ElmGithub.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectColumnInput into a value that can be used as an argument.
-}
encodeUpdateProjectColumnInput : UpdateProjectColumnInput -> Value
encodeUpdateProjectColumnInput input =
    Encode.maybeObject
        [ ( "projectColumnId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.projectColumnId |> Just ), ( "name", Encode.string input.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateProjectInput : UpdateProjectInputRequiredFields -> (UpdateProjectInputOptionalFields -> UpdateProjectInputOptionalFields) -> UpdateProjectInput
buildUpdateProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, body = Absent, state = Absent, public = Absent, clientMutationId = Absent }
    in
    { projectId = required.projectId, name = optionals.name, body = optionals.body, state = optionals.state, public = optionals.public, clientMutationId = optionals.clientMutationId }


type alias UpdateProjectInputRequiredFields =
    { projectId : ElmGithub.ScalarCodecs.Id }


type alias UpdateProjectInputOptionalFields =
    { name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument ElmGithub.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectInput input object.
-}
type alias UpdateProjectInput =
    { projectId : ElmGithub.ScalarCodecs.Id
    , name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument ElmGithub.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectInput into a value that can be used as an argument.
-}
encodeUpdateProjectInput : UpdateProjectInput -> Value
encodeUpdateProjectInput input =
    Encode.maybeObject
        [ ( "projectId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "body", Encode.string |> Encode.optional input.body ), ( "state", Encode.enum ElmGithub.Enum.ProjectState.toString |> Encode.optional input.state ), ( "public", Encode.bool |> Encode.optional input.public ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdatePullRequestReviewCommentInput : UpdatePullRequestReviewCommentInputRequiredFields -> (UpdatePullRequestReviewCommentInputOptionalFields -> UpdatePullRequestReviewCommentInputOptionalFields) -> UpdatePullRequestReviewCommentInput
buildUpdatePullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewCommentId = required.pullRequestReviewCommentId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias UpdatePullRequestReviewCommentInputRequiredFields =
    { pullRequestReviewCommentId : ElmGithub.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewCommentInput input object.
-}
type alias UpdatePullRequestReviewCommentInput =
    { pullRequestReviewCommentId : ElmGithub.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewCommentInput : UpdatePullRequestReviewCommentInput -> Value
encodeUpdatePullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewCommentId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestReviewCommentId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdatePullRequestReviewInput : UpdatePullRequestReviewInputRequiredFields -> (UpdatePullRequestReviewInputOptionalFields -> UpdatePullRequestReviewInputOptionalFields) -> UpdatePullRequestReviewInput
buildUpdatePullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias UpdatePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewInput input object.
-}
type alias UpdatePullRequestReviewInput =
    { pullRequestReviewId : ElmGithub.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestReviewInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewInput : UpdatePullRequestReviewInput -> Value
encodeUpdatePullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateSubscriptionInput : UpdateSubscriptionInputRequiredFields -> (UpdateSubscriptionInputOptionalFields -> UpdateSubscriptionInputOptionalFields) -> UpdateSubscriptionInput
buildUpdateSubscriptionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subscribableId = required.subscribableId, state = required.state, clientMutationId = optionals.clientMutationId }


type alias UpdateSubscriptionInputRequiredFields =
    { subscribableId : ElmGithub.ScalarCodecs.Id
    , state : ElmGithub.Enum.SubscriptionState.SubscriptionState
    }


type alias UpdateSubscriptionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateSubscriptionInput input object.
-}
type alias UpdateSubscriptionInput =
    { subscribableId : ElmGithub.ScalarCodecs.Id
    , state : ElmGithub.Enum.SubscriptionState.SubscriptionState
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateSubscriptionInput into a value that can be used as an argument.
-}
encodeUpdateSubscriptionInput : UpdateSubscriptionInput -> Value
encodeUpdateSubscriptionInput input =
    Encode.maybeObject
        [ ( "subscribableId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.subscribableId |> Just ), ( "state", Encode.enum ElmGithub.Enum.SubscriptionState.toString input.state |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateTopicsInput : UpdateTopicsInputRequiredFields -> (UpdateTopicsInputOptionalFields -> UpdateTopicsInputOptionalFields) -> UpdateTopicsInput
buildUpdateTopicsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, topicNames = required.topicNames, clientMutationId = optionals.clientMutationId }


type alias UpdateTopicsInputRequiredFields =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , topicNames : List String
    }


type alias UpdateTopicsInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTopicsInput input object.
-}
type alias UpdateTopicsInput =
    { repositoryId : ElmGithub.ScalarCodecs.Id
    , topicNames : List String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTopicsInput into a value that can be used as an argument.
-}
encodeUpdateTopicsInput : UpdateTopicsInput -> Value
encodeUpdateTopicsInput input =
    Encode.maybeObject
        [ ( "repositoryId", (ElmGithub.ScalarCodecs.codecs |> ElmGithub.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "topicNames", (Encode.string |> Encode.list) input.topicNames |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUserStatusOrder : UserStatusOrderRequiredFields -> UserStatusOrder
buildUserStatusOrder required =
    { field = required.field, direction = required.direction }


type alias UserStatusOrderRequiredFields =
    { field : ElmGithub.Enum.UserStatusOrderField.UserStatusOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Type for the UserStatusOrder input object.
-}
type alias UserStatusOrder =
    { field : ElmGithub.Enum.UserStatusOrderField.UserStatusOrderField
    , direction : ElmGithub.Enum.OrderDirection.OrderDirection
    }


{-| Encode a UserStatusOrder into a value that can be used as an argument.
-}
encodeUserStatusOrder : UserStatusOrder -> Value
encodeUserStatusOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum ElmGithub.Enum.UserStatusOrderField.toString input.field |> Just ), ( "direction", Encode.enum ElmGithub.Enum.OrderDirection.toString input.direction |> Just ) ]
