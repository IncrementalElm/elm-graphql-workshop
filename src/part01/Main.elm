module Main exposing (main)

import Books.Object.Book
import Books.Query as Query
import Browser
import Graphql.Document as Document
import Graphql.Http
import Graphql.Operation exposing (RootQuery)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet as SelectionSet exposing (SelectionSet, hardcoded, with)
import Helpers.Main
import RemoteData exposing (RemoteData)
import Time



{-

   The `query` definition in our Elm code
   is selecting a single top-level field, `hello`.
   The generated schema (generated by https://npmjs.com/package/@dillonkearns/elm-graphql)
   is aware that the type it will return is a
   `String` if it succeeds, hence the type annotation.

   query {
     hello
   }

-}


type alias Response =
    ()


query : SelectionSet Response RootQuery
query =
    SelectionSet.empty


makeRequest : Cmd Msg
makeRequest =
    query
        |> Graphql.Http.queryRequest "/api"
        |> Graphql.Http.send (RemoteData.fromResult >> GotResponse)



-- Elm Architecture Setup


type Msg
    = GotResponse Model


type alias Model =
    RemoteData (Graphql.Http.Error Response) Response


type alias Flags =
    ()


init : Flags -> ( Model, Cmd Msg )
init _ =
    ( RemoteData.Loading, makeRequest )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotResponse response ->
            ( response, Cmd.none )


main : Helpers.Main.Program Flags Model Msg
main =
    Helpers.Main.document
        { init = init
        , update = update
        , queryString = Document.serializeQuery query
        , instructions =
            { title = "Making The First Query"
            , body = """Look at the query in the query explorer. This is what an "empty" query looks like. You could make this query anywhere, in any schema, and you would get the same thing.


| List
    - What happens if you delete {Code|__typename} in the GraphQL query pane?
    - Why is the data returned different in the {Code|elm-graphql} response and the {Code|gql} response?


<>
| Header
    Exercise

Before doing the exercise:

| List
    - There is exactly one top-level value you can get without doing any nested selection sets. Which is it? Why do you need to nest selection sets for some, but not for this one? Hint: try exploring the {Code|< Docs} pane.
    - What do you expect to be the return type in your Elm code when you fetch this? Why?

<>
Now, fetch the field described above."""
            }
        }
